// ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô - JavaScript ‡∏´‡∏•‡∏±‡∏Å
// Version: 3.4.0 - Added admin-only system info and improved print headers
// Sheet ID: 1fUothdjvvd8A9Gf_uW4WWpsnABxmet2sK0egxHstIJo

// Global variables
let isAdmin = false;
let scheduleData = {};
let teacherData = {};
let subjectData = {};
let roomData = {};
let classData = {};
let googleSheetsUrl = '';
let onlineMode = true;

// Data management functions
class DataManager {
    static saveToLocalStorage() {
        try {
            localStorage.setItem('scheduleData', JSON.stringify(scheduleData));
            localStorage.setItem('teacherData', JSON.stringify(teacherData));
            localStorage.setItem('subjectData', JSON.stringify(subjectData));
            localStorage.setItem('roomData', JSON.stringify(roomData));
            localStorage.setItem('classData', JSON.stringify(classData));
            localStorage.setItem('googleSheetsUrl', googleSheetsUrl);
            localStorage.setItem('onlineMode', onlineMode.toString());
            return true;
        } catch (error) {
            console.error('Error saving to localStorage:', error);
            return false;
        }
    }

    static loadFromLocalStorage() {
        try {
            const savedSchedule = localStorage.getItem('scheduleData');
            const savedTeachers = localStorage.getItem('teacherData');
            const savedSubjects = localStorage.getItem('subjectData');
            const savedRooms = localStorage.getItem('roomData');
            const savedClasses = localStorage.getItem('classData');
            const savedUrl = localStorage.getItem('googleSheetsUrl');
            const savedOnlineMode = localStorage.getItem('onlineMode');

            if (savedSchedule) scheduleData = JSON.parse(savedSchedule);
            if (savedTeachers) teacherData = JSON.parse(savedTeachers);
            if (savedSubjects) subjectData = JSON.parse(savedSubjects);
            if (savedRooms) roomData = JSON.parse(savedRooms);
            if (savedClasses) classData = JSON.parse(savedClasses);
            if (savedUrl) googleSheetsUrl = savedUrl;
            if (savedOnlineMode) onlineMode = savedOnlineMode === 'true';

            return true;
        } catch (error) {
            console.error('Error loading from localStorage:', error);
            return false;
        }
    }

    static async saveToGoogleSheets() {
        if (!onlineMode || !googleSheetsUrl) {
            return { success: false, message: '‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ URL' };
        }

        try {
            const timestamp = new Date().getTime();
            // ‡πÉ‡∏ä‡πâ URL ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ CORS
            const url = this.fixGoogleScriptUrl(googleSheetsUrl) + `?action=saveAllData&t=${timestamp}`;
            
            console.log('üîÑ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á:', url);
            
            const requestData = {
                action: 'saveAllData',
                data: {
                    teachers: Object.values(teacherData),
                    subjects: Object.values(subjectData),
                    rooms: Object.values(roomData),
                    classes: Object.values(classData),
                    schedule: scheduleData
                }
            };

            // ‡πÉ‡∏ä‡πâ fetch ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö error handling ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ timeout

            const response = await fetch(url, {
                method: 'POST',
                mode: 'no-cors', // ‡πÉ‡∏ä‡πâ no-cors ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ CORS
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestData),
                signal: controller.signal
            }).catch(error => {
                if (error.name === 'AbortError') {
                    throw new Error('Request timeout - ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ');
                }
                throw error;
            });

            clearTimeout(timeoutId);

            // ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î no-cors ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô response ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ request ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (response && response.type === 'opaque') {
                // opaque response ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô response ‡πÑ‡∏î‡πâ)
                return { success: true, message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (no-cors mode)' };
            }

            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà no-cors mode ‡πÉ‡∏´‡πâ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô response
            try {
                const result = await response.json();
                return result;
            } catch (parseError) {
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ parse JSON ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà status 200 ‡∏Å‡πá‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                if (response.ok) {
                    return { success: true, message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' };
                } else {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
            }
            
        } catch (error) {
            console.error('‚ùå Error saving to Google Sheets:', error);
            
            // ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• error ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
            let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ';
            
            if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
                errorMessage += '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï';
            } else if (error.message.includes('timeout')) {
                errorMessage += '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
            } else if (error.message.includes('CORS')) {
                errorMessage += '‡∏õ‡∏±‡∏ç‡∏´‡∏≤ CORS - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Apps Script';
            } else {
                errorMessage += error.message;
            }
            
            return { success: false, message: errorMessage };
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î
    static async saveToGoogleSheetsInBatches() {
        if (!onlineMode || !googleSheetsUrl) {
            return { success: false, message: '‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ URL' };
        }

        try {
            const timestamp = new Date().getTime();
            const baseUrl = this.fixGoogleScriptUrl(googleSheetsUrl);
            
            // ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡πÄ‡∏•‡πá‡∏Å‡πÜ
            const batchSize = 20; // ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            const scheduleBatches = this.splitScheduleIntoBatches(scheduleData, batchSize);
            
            let totalSuccess = 0;
            let totalFailures = 0;
            
            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡∏∏‡∏î
            for (let i = 0; i < scheduleBatches.length; i++) {
                try {
                    showProgress('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...', i + 1, scheduleBatches.length);
                    
                    const batchData = {
                        teachers: Object.values(teacherData),
                        subjects: Object.values(subjectData),
                        rooms: Object.values(roomData),
                        classes: Object.values(classData),
                        schedule: scheduleBatches[i],
                        batchInfo: {
                            current: i + 1,
                            total: scheduleBatches.length,
                            isLast: i === scheduleBatches.length - 1
                        }
                    };
                    
                    const url = baseUrl + `?action=saveAllData&batch=${i + 1}&total=${scheduleBatches.length}&t=${timestamp}`;
                    
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), 30000);

                    const response = await fetch(url, {
                        method: 'POST',
                        mode: 'no-cors',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            action: 'saveAllData',
                            data: batchData
                        }),
                        signal: controller.signal
                    }).catch(error => {
                        if (error.name === 'AbortError') {
                            throw new Error('Request timeout');
                        }
                        throw error;
                    });

                    clearTimeout(timeoutId);

                    if (response && (response.ok || response.type === 'opaque')) {
                        totalSuccess++;
                        console.log(`‚úÖ Batch ${i + 1} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
                    } else {
                        totalFailures++;
                        console.log(`‚ùå Batch ${i + 1} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß`);
                    }
                    
                    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏∏‡∏î
                    await new Promise(resolve => setTimeout(resolve, 1000));
                } catch (batchError) {
                    console.error(`‚ùå Error in batch ${i + 1}:`, batchError);
                    totalFailures++;
                    
                    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 3 ‡∏ä‡∏∏‡∏î ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
                    if (totalFailures >= 3) {
                        throw new Error(`‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 3 ‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${batchError.message}`);
                    }
                }
            }
            
            hideProgress();
            
            if (totalFailures === 0) {
                return { success: true, message: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${totalSuccess} ‡∏ä‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à` };
            } else {
                return { 
                    success: false, 
                    message: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${totalSuccess} ‡∏ä‡∏∏‡∏î, ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ${totalFailures} ‡∏ä‡∏∏‡∏î` 
                };
            }
        } catch (error) {
            hideProgress();
            console.error('‚ùå Error saving to Google Sheets in batches:', error);
            return { success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î: ' + error.message };
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL Google Script
    static fixGoogleScriptUrl(url) {
        if (!url) return '';
        
        let fixedUrl = url.trim();
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        try {
            new URL(fixedUrl);
        } catch (error) {
            console.error('Invalid URL:', error);
            return url;
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Google Apps Script URL ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!fixedUrl.includes('script.google.com')) {
            console.warn('URL ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Google Apps Script URL');
            return url;
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ /dev ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢
        if (fixedUrl.includes('/dev')) {
            fixedUrl = fixedUrl.replace('/dev', '');
            console.log('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å deployment /dev ‡πÄ‡∏õ‡πá‡∏ô production');
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ query parameters ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        const urlObj = new URL(fixedUrl);
        urlObj.search = ''; // ‡∏•‡πâ‡∏≤‡∏á query parameters ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        
        return urlObj.toString();
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡πÄ‡∏•‡πá‡∏Å‡πÜ
    static splitScheduleIntoBatches(scheduleData, batchSize) {
        const batches = [];
        let currentBatch = {};
        let count = 0;
        
        for (const [className, days] of Object.entries(scheduleData)) {
            if (!currentBatch[className]) {
                currentBatch[className] = {};
            }
            
            for (const [day, periods] of Object.entries(days)) {
                if (!currentBatch[className][day]) {
                    currentBatch[className][day] = {};
                }
                
                for (const [period, data] of Object.entries(periods)) {
                    currentBatch[className][day][period] = data;
                    count++;
                    
                    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà
                    if (count >= batchSize) {
                        batches.push(currentBatch);
                        currentBatch = {};
                        count = 0;
                    }
                }
            }
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if (Object.keys(currentBatch).length > 0) {
            batches.push(currentBatch);
        }
        
        console.log(`‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô ${batches.length} ‡∏ä‡∏∏‡∏î, ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡∏∏‡∏î‡∏•‡∏∞ ${batchSize} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
        return batches;
    }

    static async loadFromGoogleSheets() {
        if (!onlineMode || !googleSheetsUrl) {
            return { success: false, message: '‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ URL' };
        }

        try {
            const timestamp = new Date().getTime();
            const url = this.fixGoogleScriptUrl(googleSheetsUrl) + `?action=getAllData&t=${timestamp}`;
            
            console.log('üîÑ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å:', url);
            
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 30000);

            const response = await fetch(url, {
                method: 'GET',
                signal: controller.signal
            }).catch(error => {
                if (error.name === 'AbortError') {
                    throw new Error('Request timeout');
                }
                throw error;
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            
            if (result.success && result.data) {
                // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å array ‡πÄ‡∏õ‡πá‡∏ô object
                if (result.data.teachers) {
                    teacherData = {};
                    result.data.teachers.forEach(teacher => {
                        teacherData[teacher['‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏£‡∏π']] = {
                            code: teacher['‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏£‡∏π'],
                            name: teacher['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'],
                            position: teacher['‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á']
                        };
                    });
                }
                
                if (result.data.subjects) {
                    subjectData = {};
                    result.data.subjects.forEach(subject => {
                        subjectData[subject['‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤']] = {
                            code: subject['‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤'],
                            name: subject['‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤'],
                            credit: subject['‡∏ô‡∏Å.']
                        };
                    });
                }
                
                if (result.data.rooms) {
                    roomData = {};
                    result.data.rooms.forEach(room => {
                        roomData[room['‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á']] = {
                            code: room['‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á'],
                            name: room['‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á'],
                            type: room['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'],
                            capacity: room['‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏']
                        };
                    });
                }
                
                if (result.data.classes) {
                    classData = {};
                    result.data.classes.forEach(classItem => {
                        classData[classItem['‡∏£‡∏´‡∏±‡∏™‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô']] = {
                            code: classItem['‡∏£‡∏´‡∏±‡∏™‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô'],
                            name: classItem['‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô'],
                            program: classItem['‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤'],
                            advisor: classItem['‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤'],
                            studentCount: classItem['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô']
                        };
                    });
                }
                
                if (result.data.schedule) {
                    scheduleData = result.data.schedule;
                }
                
                DataManager.saveToLocalStorage();
                return { success: true, message: '‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' };
            } else {
                return { success: false, message: result.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ' };
            }
        } catch (error) {
            console.error('‚ùå Error loading from Google Sheets:', error);
            
            let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î: ';
            if (error.message.includes('Failed to fetch')) {
                errorMessage += '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï';
            } else {
                errorMessage += error.message;
            }
            
            return { success: false, message: errorMessage };
        }
    }

    static exportData(type = 'all') {
        try {
            let dataToExport;
            let filename;
            
            switch (type) {
                case 'teachers':
                    dataToExport = teacherData;
                    filename = `teachers_${this.getTimestamp()}.json`;
                    break;
                case 'subjects':
                    dataToExport = subjectData;
                    filename = `subjects_${this.getTimestamp()}.json`;
                    break;
                case 'rooms':
                    dataToExport = roomData;
                    filename = `rooms_${this.getTimestamp()}.json`;
                    break;
                case 'classes':
                    dataToExport = classData;
                    filename = `classes_${this.getTimestamp()}.json`;
                    break;
                case 'schedule':
                    dataToExport = scheduleData;
                    filename = `schedule_${this.getTimestamp()}.json`;
                    break;
                case 'all':
                default:
                    dataToExport = {
                        scheduleData,
                        teacherData,
                        subjectData,
                        roomData,
                        classData,
                        exportDate: new Date().toISOString(),
                        version: '3.4.0'
                    };
                    filename = `schedule_system_backup_${this.getTimestamp()}.json`;
                    break;
            }

            const dataStr = JSON.stringify(dataToExport, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });
            
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);

            showNotification(`‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${type} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`, 'success');
            return true;
        } catch (error) {
            console.error('Error exporting data:', error);
            showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', 'error');
            return false;
        }
    }

    static importData(file, replace = false) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            
            reader.onload = function(e) {
                try {
                    const importedData = JSON.parse(e.target.result);
                    
                    if (replace) {
                        // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                        if (importedData.scheduleData) scheduleData = importedData.scheduleData;
                        if (importedData.teacherData) teacherData = importedData.teacherData;
                        if (importedData.subjectData) subjectData = importedData.subjectData;
                        if (importedData.roomData) roomData = importedData.roomData;
                        if (importedData.classData) classData = importedData.classData;
                    } else {
                        // ‡∏ú‡∏™‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÑ‡∏°‡πà‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)
                        if (importedData.scheduleData) scheduleData = { ...scheduleData, ...importedData.scheduleData };
                        if (importedData.teacherData) teacherData = { ...teacherData, ...importedData.teacherData };
                        if (importedData.subjectData) subjectData = { ...subjectData, ...importedData.subjectData };
                        if (importedData.roomData) roomData = { ...roomData, ...importedData.roomData };
                        if (importedData.classData) classData = { ...classData, ...importedData.classData };
                    }
                    
                    DataManager.saveToLocalStorage();
                    
                    // ‡∏£‡∏µ‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    TeacherManager.renderTeacherTable();
                    SubjectManager.renderSubjectTable();
                    RoomManager.renderRoomTable();
                    ClassManager.renderClassTable();
                    ScheduleRenderer.renderAllViews();
                    
                    resolve(true);
                } catch (error) {
                    reject(new Error('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'));
                }
            };
            
            reader.onerror = function() {
                reject(new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ'));
            };
            
            reader.readAsText(file);
        });
    }

    static getTimestamp() {
        return new Date().toISOString().slice(0, 19).replace(/:/g, '-');
    }

    static getStats() {
        return {
            teachers: Object.keys(teacherData).length,
            subjects: Object.keys(subjectData).length,
            rooms: Object.keys(roomData).length,
            classes: Object.keys(classData).length,
            scheduleEntries: Object.keys(scheduleData).reduce((acc, className) => {
                return acc + Object.keys(scheduleData[className]).reduce((dayAcc, day) => {
                    return dayAcc + Object.keys(scheduleData[className][day]).length;
                }, 0);
            }, 0)
        };
    }

    static async autoSave() {
        if (onlineMode && googleSheetsUrl) {
            try {
                await this.saveToGoogleSheets();
                console.log('Auto-save to Google Sheets completed');
            } catch (error) {
                console.error('Auto-save failed:', error);
            }
        }
    }
}

// Google Sheets integration
class GoogleSheetsManager {
    static async testConnectionWithRetry(maxRetries = 3) {
        if (!googleSheetsUrl) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Google Apps Script URL');
        }

        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                console.log(`üîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${attempt}`);
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô caching
                const timestamp = new Date().getTime();
                const testUrl = DataManager.fixGoogleScriptUrl(googleSheetsUrl) + `?action=test&attempt=${attempt}&t=${timestamp}`;
                
                console.log('URL ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', testUrl);
                
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 15000);

                const response = await fetch(testUrl, {
                    method: 'GET',
                    signal: controller.signal
                }).catch(error => {
                    if (error.name === 'AbortError') {
                        throw new Error('Request timeout');
                    }
                    throw error;
                });

                clearTimeout(timeoutId);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà', attempt);
                    return result;
                } else {
                    throw new Error(result.message || '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
                }
            } catch (error) {
                console.error(`‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${attempt}:`, error);
                
                if (attempt === maxRetries) {
                    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞ throw error
                    const fallbackResult = await this.tryAlternativeMethods();
                    if (fallbackResult) {
                        return fallbackResult;
                    }
                    throw new Error('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏≠‡∏á ' + maxRetries + ' ‡∏Ñ‡∏£‡∏±‡πâ‡∏á: ' + error.message);
                }
                
                // ‡∏£‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏≠‡∏á
                const waitTime = attempt * 2000;
                console.log(`‚è≥ ‡∏£‡∏≠ ${waitTime/1000} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...`);
                await new Promise(resolve => setTimeout(resolve, waitTime));
            }
        }
    }

    static async tryAlternativeMethods() {
        console.log('üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡πÜ...');
        
        // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ XMLHttpRequest
        try {
            const result = await this.testWithXMLHttpRequest();
            if (result) return result;
        } catch (error) {
            console.error('XMLHttpRequest failed:', error);
        }
        
        // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ no-cors mode
        try {
            const result = await this.testWithNoCors();
            if (result) return result;
        } catch (error) {
            console.error('No-cors test failed:', error);
        }
        
        return null;
    }

    static testWithXMLHttpRequest() {
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            const timestamp = new Date().getTime();
            const url = DataManager.fixGoogleScriptUrl(googleSheetsUrl) + `?action=test&t=${timestamp}`;
            
            xhr.open('GET', url, true);
            xhr.timeout = 15000;
            
            xhr.onload = function() {
                if (xhr.status === 200) {
                    try {
                        const result = JSON.parse(xhr.responseText);
                        resolve(result);
                    } catch (error) {
                        resolve({
                            success: true,
                            message: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ parse JSON ‡πÑ‡∏î‡πâ',
                            rawResponse: xhr.responseText
                        });
                    }
                } else {
                    reject(new Error(`HTTP ${xhr.status}: ${xhr.statusText}`));
                }
            };
            
            xhr.onerror = function() {
                reject(new Error('Network error'));
            };
            
            xhr.ontimeout = function() {
                reject(new Error('Request timeout'));
            };
            
            xhr.send();
        });
    }

    static async testWithNoCors() {
        try {
            const timestamp = new Date().getTime();
            const url = DataManager.fixGoogleScriptUrl(googleSheetsUrl) + `?action=test&t=${timestamp}`;
            
            const response = await fetch(url, {
                method: 'GET',
                mode: 'no-cors'
            });
            
            // ‡πÉ‡∏ô no-cors mode ‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô response ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà error ‡∏Å‡πá‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
            return {
                success: true,
                message: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ (no-cors mode) - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response ‡πÑ‡∏î‡πâ',
                method: 'No-CORS'
            };
        } catch (error) {
            throw new Error('No-cors connection failed: ' + error.message);
        }
    }

    static async checkUrlValidity() {
        try {
            // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
            const response = await fetch(googleSheetsUrl, {
                method: 'HEAD',
                mode: 'no-cors'
            });
            
            return {
                valid: true,
                message: 'URL ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ'
            };
        } catch (error) {
            return {
                valid: false,
                message: 'URL ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ: ' + error.message
            };
        }
    }

    static async testConnection() {
        if (!googleSheetsUrl) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Google Apps Script URL');
        }

        try {
            // ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ
            const result = await this.testConnectionWithRetry(2);
            return result;
        } catch (error) {
            // ‡∏´‡∏≤‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
            console.log('üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á...');
            
            try {
                const simpleTest = await this.simpleConnectionTest();
                return simpleTest;
            } catch (fallbackError) {
                throw new Error('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ' + error.message + ' | ' + fallbackError.message);
            }
        }
    }

    static async simpleConnectionTest() {
        return new Promise((resolve, reject) => {
            const img = new Image();
            const timestamp = new Date().getTime();
            const testUrl = DataManager.fixGoogleScriptUrl(googleSheetsUrl) + `?action=test&t=${timestamp}`;
            
            img.onload = function() {
                resolve({
                    success: true,
                    message: '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ (‡∏ú‡πà‡∏≤‡∏ô Image load)',
                    method: 'Image Load'
                });
            };
            
            img.onerror = function() {
                reject(new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î resource ‡∏à‡∏≤‡∏Å URL ‡πÑ‡∏î‡πâ'));
            };
            
            img.src = testUrl;
        });
    }

    static async initializeSheets() {
        if (!googleSheetsUrl) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Google Apps Script URL');
        }

        try {
            const timestamp = new Date().getTime();
            const response = await fetch(DataManager.fixGoogleScriptUrl(googleSheetsUrl) + `?action=initialize&t=${timestamp}`);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            return result;
        } catch (error) {
            throw new Error('‡∏Å‡∏≤‡∏£ initialize ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + error.message);
        }
    }

    static async syncToSheets() {
        if (!googleSheetsUrl) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Google Apps Script URL');
        }

        try {
            console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
            const result = await DataManager.saveToGoogleSheets();
            
            if (result.success) {
                console.log('‚úÖ Sync ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', result.message);
            } else {
                console.error('‚ùå Sync ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', result.message);
            }
            
            return result;
        } catch (error) {
            console.error('‚ùå Error in syncToSheets:', error);
            throw new Error('‡∏Å‡∏≤‡∏£ sync ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + error.message);
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: sync ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î
    static async syncToSheetsBatch() {
        if (!googleSheetsUrl) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Google Apps Script URL');
        }

        try {
            console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î...');
            const result = await DataManager.saveToGoogleSheetsInBatches();
            
            if (result.success) {
                console.log('‚úÖ Sync ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', result.message);
            } else {
                console.error('‚ùå Sync ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', result.message);
            }
            
            return result;
        } catch (error) {
            console.error('‚ùå Error in syncToSheetsBatch:', error);
            throw new Error('‡∏Å‡∏≤‡∏£ sync ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + error.message);
        }
    }

    static async loadFromSheets() {
        if (!googleSheetsUrl) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Google Apps Script URL');
        }

        try {
            const result = await DataManager.loadFromGoogleSheets();
            if (result.success) {
                // ‡∏£‡∏µ‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                TeacherManager.renderTeacherTable();
                SubjectManager.renderSubjectTable();
                RoomManager.renderRoomTable();
                ClassManager.renderClassTable();
                ScheduleRenderer.renderAllViews();
            }
            return result;
        } catch (error) {
            throw new Error('‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + error.message);
        }
    }
}

// Data Management Classes
class TeacherManager {
    static renderTeacherTable() {
        const teacherTableBody = document.getElementById('teacherTableBody');
        const teacherCountBadge = document.getElementById('teacherCountBadge');
        
        if (!teacherTableBody) return;
        
        teacherTableBody.innerHTML = '';
        teacherCountBadge.textContent = Object.keys(teacherData).length;
        
        Object.values(teacherData).forEach(teacher => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${teacher.code}</td>
                <td>${teacher.name}</td>
                <td>${teacher.position || '-'}</td>
                <td>
                    <button class="btn btn-sm btn-warning edit-teacher" data-id="${teacher.code}">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-sm btn-danger delete-teacher" data-id="${teacher.code}">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            `;
            teacherTableBody.appendChild(row);
        });
        
        // Add event listeners
        document.querySelectorAll('.edit-teacher').forEach(btn => {
            btn.addEventListener('click', () => this.editTeacher(btn.dataset.id));
        });
        
        document.querySelectorAll('.delete-teacher').forEach(btn => {
            btn.addEventListener('click', () => this.deleteTeacher(btn.dataset.id));
        });
    }
    
    static addTeacher() {
        document.getElementById('teacherFormTitle').textContent = '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏£‡∏π';
        document.getElementById('teacherForm').reset();
        document.getElementById('teacherId').value = '';
        
        const modal = new bootstrap.Modal(document.getElementById('teacherFormModal'));
        modal.show();
    }
    
    static editTeacher(teacherId) {
        const teacher = teacherData[teacherId];
        if (!teacher) return;
        
        document.getElementById('teacherFormTitle').textContent = '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏π';
        document.getElementById('teacherId').value = teacher.code;
        document.getElementById('teacherCode').value = teacher.code;
        document.getElementById('teacherName').value = teacher.name;
        document.getElementById('teacherPosition').value = teacher.position || '';
        
        const modal = new bootstrap.Modal(document.getElementById('teacherFormModal'));
        modal.show();
    }
    
    static deleteTeacher(teacherId) {
        if (confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏£‡∏π‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ?')) {
            delete teacherData[teacherId];
            DataManager.saveToLocalStorage();
            DataManager.autoSave();
            this.renderTeacherTable();
            ScheduleRenderer.renderAllViews();
            showNotification('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏π‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
        }
    }
    
    static saveTeacher(formData) {
        const teacherId = formData.id || formData.code;
        
        teacherData[teacherId] = {
            code: formData.code,
            name: formData.name,
            position: formData.position
        };
        
        DataManager.saveToLocalStorage();
        DataManager.autoSave();
        this.renderTeacherTable();
        ScheduleRenderer.renderAllViews();
        return true;
    }
}

class SubjectManager {
    static renderSubjectTable() {
        const subjectTableBody = document.getElementById('subjectTableBody');
        const subjectCountBadge = document.getElementById('subjectCountBadge');
        
        if (!subjectTableBody) return;
        
        subjectTableBody.innerHTML = '';
        subjectCountBadge.textContent = Object.keys(subjectData).length;
        
        Object.values(subjectData).forEach(subject => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${subject.code}</td>
                <td>${subject.name}</td>
                <td>${subject.credit || '-'}</td>
                <td>
                    <button class="btn btn-sm btn-warning edit-subject" data-id="${subject.code}">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-sm btn-danger delete-subject" data-id="${subject.code}">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            `;
            subjectTableBody.appendChild(row);
        });
        
        // Add event listeners
        document.querySelectorAll('.edit-subject').forEach(btn => {
            btn.addEventListener('click', () => this.editSubject(btn.dataset.id));
        });
        
        document.querySelectorAll('.delete-subject').forEach(btn => {
            btn.addEventListener('click', () => this.deleteSubject(btn.dataset.id));
        });
    }
    
    static addSubject() {
        document.getElementById('subjectFormTitle').textContent = '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤';
        document.getElementById('subjectForm').reset();
        document.getElementById('subjectId').value = '';
        
        const modal = new bootstrap.Modal(document.getElementById('subjectFormModal'));
        modal.show();
    }
    
    static editSubject(subjectId) {
        const subject = subjectData[subjectId];
        if (!subject) return;
        
        document.getElementById('subjectFormTitle').textContent = '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤';
        document.getElementById('subjectId').value = subject.code;
        document.getElementById('subjectCode').value = subject.code;
        document.getElementById('subjectName').value = subject.name;
        document.getElementById('subjectCredit').value = subject.credit || '';
        
        const modal = new bootstrap.Modal(document.getElementById('subjectFormModal'));
        modal.show();
    }
    
    static deleteSubject(subjectId) {
        if (confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ?')) {
            delete subjectData[subjectId];
            DataManager.saveToLocalStorage();
            DataManager.autoSave();
            this.renderSubjectTable();
            showNotification('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
        }
    }
    
    static saveSubject(formData) {
        const subjectId = formData.id || formData.code;
        
        subjectData[subjectId] = {
            code: formData.code,
            name: formData.name,
            credit: formData.credit
        };
        
        DataManager.saveToLocalStorage();
        DataManager.autoSave();
        this.renderSubjectTable();
        return true;
    }
}

class RoomManager {
    static renderRoomTable() {
        const roomTableBody = document.getElementById('roomTableBody');
        const roomCountBadge = document.getElementById('roomCountBadge');
        
        if (!roomTableBody) return;
        
        roomTableBody.innerHTML = '';
        roomCountBadge.textContent = Object.keys(roomData).length;
        
        Object.values(roomData).forEach(room => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${room.code}</td>
                <td>${room.name}</td>
                <td>${room.type || '-'}</td>
                <td>${room.capacity || '-'}</td>
                <td>
                    <button class="btn btn-sm btn-warning edit-room" data-id="${room.code}">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-sm btn-danger delete-room" data-id="${room.code}">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            `;
            roomTableBody.appendChild(row);
        });
        
        // Add event listeners
        document.querySelectorAll('.edit-room').forEach(btn => {
            btn.addEventListener('click', () => this.editRoom(btn.dataset.id));
        });
        
        document.querySelectorAll('.delete-room').forEach(btn => {
            btn.addEventListener('click', () => this.deleteRoom(btn.dataset.id));
        });
    }
    
    static addRoom() {
        document.getElementById('roomFormTitle').textContent = '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á';
        document.getElementById('roomForm').reset();
        document.getElementById('roomId').value = '';
        
        const modal = new bootstrap.Modal(document.getElementById('roomFormModal'));
        modal.show();
    }
    
    static editRoom(roomId) {
        const room = roomData[roomId];
        if (!room) return;
        
        document.getElementById('roomFormTitle').textContent = '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á';
        document.getElementById('roomId').value = room.code;
        document.getElementById('roomCode').value = room.code;
        document.getElementById('roomName').value = room.name;
        document.getElementById('roomType').value = room.type || '‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô';
        document.getElementById('roomCapacity').value = room.capacity || '';
        
        const modal = new bootstrap.Modal(document.getElementById('roomFormModal'));
        modal.show();
    }
    
    static deleteRoom(roomId) {
        if (confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ?')) {
            delete roomData[roomId];
            DataManager.saveToLocalStorage();
            DataManager.autoSave();
            this.renderRoomTable();
            ScheduleRenderer.renderAllViews();
            showNotification('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
        }
    }
    
    static saveRoom(formData) {
        const roomId = formData.id || formData.code;
        
        roomData[roomId] = {
            code: formData.code,
            name: formData.name,
            type: formData.type,
            capacity: formData.capacity
        };
        
        DataManager.saveToLocalStorage();
        DataManager.autoSave();
        this.renderRoomTable();
        ScheduleRenderer.renderAllViews();
        return true;
    }
}

class ClassManager {
    static renderClassTable() {
        const classTableBody = document.getElementById('classTableBody');
        const classCountBadge = document.getElementById('classCountBadge');
        
        if (!classTableBody) return;
        
        classTableBody.innerHTML = '';
        classCountBadge.textContent = Object.keys(classData).length;
        
        Object.values(classData).forEach(classItem => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${classItem.code}</td>
                <td>${classItem.name}</td>
                <td>${classItem.program || '-'}</td>
                <td>${classItem.advisor || '-'}</td>
                <td>
                    <button class="btn btn-sm btn-warning edit-class" data-id="${classItem.code}">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-sm btn-danger delete-class" data-id="${classItem.code}">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            `;
            classTableBody.appendChild(row);
        });
        
        // Add event listeners
        document.querySelectorAll('.edit-class').forEach(btn => {
            btn.addEventListener('click', () => this.editClass(btn.dataset.id));
        });
        
        document.querySelectorAll('.delete-class').forEach(btn => {
            btn.addEventListener('click', () => this.deleteClass(btn.dataset.id));
        });
    }
    
    static addClass() {
        document.getElementById('classFormTitle').textContent = '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô';
        document.getElementById('classForm').reset();
        document.getElementById('classId').value = '';
        this.loadAdvisorOptions();
        
        const modal = new bootstrap.Modal(document.getElementById('classFormModal'));
        modal.show();
    }
    
    static editClass(classId) {
        const classItem = classData[classId];
        if (!classItem) return;
        
        document.getElementById('classFormTitle').textContent = '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô';
        document.getElementById('classId').value = classItem.code;
        document.getElementById('classCode').value = classItem.code;
        document.getElementById('className').value = classItem.name;
        document.getElementById('classProgram').value = classItem.program || '';
        this.loadAdvisorOptions(classItem.advisor);
        
        const modal = new bootstrap.Modal(document.getElementById('classFormModal'));
        modal.show();
    }
    
    static loadAdvisorOptions(selectedAdvisor = '') {
        const advisorSelect = document.getElementById('classAdvisor');
        if (!advisorSelect) return;
        
        advisorSelect.innerHTML = '<option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏π‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤ --</option>';
        
        Object.values(teacherData).forEach(teacher => {
            const option = document.createElement('option');
            option.value = teacher.name;
            option.textContent = teacher.name;
            if (teacher.name === selectedAdvisor) {
                option.selected = true;
            }
            advisorSelect.appendChild(option);
        });
    }
    
    static deleteClass(classId) {
        if (confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏µ‡πâ?')) {
            delete classData[classId];
            DataManager.saveToLocalStorage();
            DataManager.autoSave();
            this.renderClassTable();
            
            // Update class select in schedule view
            const classSelect = document.getElementById('classSelect');
            if (classSelect) {
                const optionToRemove = classSelect.querySelector(`option[value="${classId}"]`);
                if (optionToRemove) {
                    optionToRemove.remove();
                }
            }
            
            showNotification('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
        }
    }
    
    static saveClass(formData) {
        const classId = formData.id || formData.code;
        
        classData[classId] = {
            code: formData.code,
            name: formData.name,
            program: formData.program,
            advisor: formData.advisor
        };
        
        DataManager.saveToLocalStorage();
        DataManager.autoSave();
        this.renderClassTable();
        
        // Update class select in schedule view
        const classSelect = document.getElementById('classSelect');
        if (classSelect) {
            const existingOption = classSelect.querySelector(`option[value="${classId}"]`);
            if (!existingOption) {
                const newOption = document.createElement('option');
                newOption.value = classId;
                newOption.textContent = classData[classId].name;
                classSelect.appendChild(newOption);
            }
        }
        
        return true;
    }
}

// Schedule rendering functions
class ScheduleRenderer {
    static renderAllViews() {
        this.renderClassSchedule();
        this.renderTeacherSchedule();
        this.renderRoomSchedule();
        this.renderTeacherSummary();
        this.renderClassSummary();
        this.renderRoomSummary();
        this.renderSystemInfo();
        this.updateDropdowns();
    }

    static updateDropdowns() {
        // Update class select
        const classSelect = document.getElementById('classSelect');
        if (classSelect) {
            classSelect.innerHTML = '';
            Object.values(classData).forEach(classItem => {
                const option = document.createElement('option');
                option.value = classItem.code;
                option.textContent = classItem.name;
                classSelect.appendChild(option);
            });
        }

        // Update teacher select
        const teacherSelect = document.getElementById('teacherSelect');
        if (teacherSelect) {
            teacherSelect.innerHTML = '';
            Object.values(teacherData).forEach(teacher => {
                const option = document.createElement('option');
                option.value = teacher.name;
                option.textContent = teacher.name;
                teacherSelect.appendChild(option);
            });
        }

        // Update room select
        const roomSelect = document.getElementById('roomSelect');
        if (roomSelect) {
            roomSelect.innerHTML = '';
            Object.values(roomData).forEach(room => {
                const option = document.createElement('option');
                option.value = room.code;
                option.textContent = room.name;
                roomSelect.appendChild(option);
            });
        }
    }

    static renderClassSchedule() {
        const classSelect = document.getElementById('classSelect');
        const selectedClass = classSelect ? classSelect.value : Object.keys(classData)[0];
        const scheduleBody = document.getElementById('schedule-body');
        
        if (!scheduleBody) return;
        
        scheduleBody.innerHTML = '';
        
        const days = ['‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå', '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£', '‡∏û‡∏∏‡∏ò', '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ', '‡∏®‡∏∏‡∏Å‡∏£‡πå'];
        
        days.forEach(day => {
            const row = document.createElement('tr');
            row.innerHTML = `<td class="day-header">${day}</td>`;
            
            const periods = [1, 2, 3, 4, 5, 6, 7, 8];
            
            periods.forEach(period => {
                const cell = document.createElement('td');
                
                // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≤‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå
                if (day === '‡∏®‡∏∏‡∏Å‡∏£‡πå' && period === 7) {
                    cell.classList.add('activity');
                    cell.innerHTML = '<div><strong>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</strong></div>';
                    row.appendChild(cell);
                    return;
                }
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (scheduleData[selectedClass] && 
                    scheduleData[selectedClass][day] && 
                    scheduleData[selectedClass][day][period]) {
                    
                    const classInfo = scheduleData[selectedClass][day][period];
                    cell.classList.add('subject-cell');
                    
                    // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡πâ‡∏≠‡∏á
                    const roomDisplay = parseRoomDisplay(classInfo.room);
                    
                    cell.innerHTML = `
                        <div><strong>${classInfo.subject}</strong></div>
                        <div class="small">${classInfo.teacher}</div>
                        <div class="small text-muted">${roomDisplay}</div>
                    `;
                    
                    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
                    if (isAdmin) {
                        cell.classList.add('edit-mode');
                        cell.style.cursor = 'pointer';
                        cell.addEventListener('click', () => {
                            ScheduleEditor.editSchedule(selectedClass, day, period, classInfo);
                        });
                    }
                } else {
                    // ‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏ß‡πà‡∏≤‡∏á - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
                    cell.classList.add('empty-cell');
                    cell.innerHTML = '<div class="text-muted">-</div>';
                    
                    if (isAdmin) {
                        cell.style.cursor = 'pointer';
                        cell.addEventListener('click', () => {
                            ScheduleEditor.editSchedule(selectedClass, day, period);
                        });
                    }
                }
                
                row.appendChild(cell);
            });
            
            scheduleBody.appendChild(row);
        });
    }

    static renderTeacherSchedule() {
        const teacherSelect = document.getElementById('teacherSelect');
        const selectedTeacher = teacherSelect ? teacherSelect.value : Object.values(teacherData)[0]?.name;
        const teacherScheduleBody = document.getElementById('teacher-schedule-body');
        
        if (!teacherScheduleBody || !selectedTeacher) return;
        
        teacherScheduleBody.innerHTML = '';
        
        const days = ['‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå', '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£', '‡∏û‡∏∏‡∏ò', '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ', '‡∏®‡∏∏‡∏Å‡∏£‡πå'];
        
        days.forEach(day => {
            const row = document.createElement('tr');
            row.innerHTML = `<td class="day-header">${day}</td>`;
            
            const periods = [1, 2, 3, 4, 5, 6, 7, 8];
            
            periods.forEach(period => {
                const cell = document.createElement('td');
                
                if (day === '‡∏®‡∏∏‡∏Å‡∏£‡πå' && period === 7) {
                    cell.classList.add('activity');
                    cell.innerHTML = '<div><strong>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</strong></div>';
                    row.appendChild(cell);
                    return;
                }
                
                let classInfo = null;
                for (const className in scheduleData) {
                    if (scheduleData[className][day] && 
                        scheduleData[className][day][period] &&
                        scheduleData[className][day][period].teacher === selectedTeacher) {
                        
                        classInfo = scheduleData[className][day][period];
                        classInfo.className = className;
                        break;
                    }
                }
                
                if (classInfo) {
                    cell.classList.add('subject-cell');
                    const roomDisplay = parseRoomDisplay(classInfo.room);
                    
                    cell.innerHTML = `
                        <div><strong>${classInfo.subject}</strong></div>
                        <div class="small">${classInfo.className}</div>
                        <div class="small text-muted">${roomDisplay}</div>
                    `;
                } else {
                    cell.innerHTML = '<div class="text-muted">-</div>';
                }
                
                row.appendChild(cell);
            });
            
            teacherScheduleBody.appendChild(row);
        });
    }

    static renderRoomSchedule() {
        const roomSelect = document.getElementById('roomSelect');
        const selectedRoom = roomSelect ? roomSelect.value : Object.values(roomData)[0]?.code;
        const roomScheduleBody = document.getElementById('room-schedule-body');
        
        if (!roomScheduleBody || !selectedRoom) return;
        
        roomScheduleBody.innerHTML = '';
        
        const days = ['‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå', '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£', '‡∏û‡∏∏‡∏ò', '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ', '‡∏®‡∏∏‡∏Å‡∏£‡πå'];
        
        days.forEach(day => {
            const row = document.createElement('tr');
            row.innerHTML = `<td class="day-header">${day}</td>`;
            
            const periods = [1, 2, 3, 4, 5, 6, 7, 8];
            
            periods.forEach(period => {
                const cell = document.createElement('td');
                
                if (day === '‡∏®‡∏∏‡∏Å‡∏£‡πå' && period === 7) {
                    cell.classList.add('activity');
                    cell.innerHTML = '<div><strong>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</strong></div>';
                    row.appendChild(cell);
                    return;
                }
                
                let classInfo = null;
                for (const className in scheduleData) {
                    if (scheduleData[className][day] && 
                        scheduleData[className][day][period] &&
                        scheduleData[className][day][period].room === selectedRoom) {
                        
                        classInfo = scheduleData[className][day][period];
                        classInfo.className = className;
                        break;
                    }
                }
                
                if (classInfo) {
                    cell.classList.add('subject-cell');
                    cell.innerHTML = `
                        <div><strong>${classInfo.subject}</strong></div>
                        <div class="small">${classInfo.className}</div>
                        <div class="small text-muted">${classInfo.teacher}</div>
                    `;
                } else {
                    cell.innerHTML = '<div class="text-muted">-</div>';
                }
                
                row.appendChild(cell);
            });
            
            roomScheduleBody.appendChild(row);
        });
    }

    static renderTeacherSummary() {
        const teacherSummaryContent = document.getElementById('teacher-summary-content');
        if (!teacherSummaryContent) return;
        
        teacherSummaryContent.innerHTML = '';
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏™‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏π‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡πà‡∏≤‡∏ô
        const teacherHours = {};
        
        for (const className in scheduleData) {
            for (const day in scheduleData[className]) {
                for (const period in scheduleData[className][day]) {
                    const classInfo = scheduleData[className][day][period];
                    if (classInfo.teacher && classInfo.subject) {
                        if (!teacherHours[classInfo.teacher]) {
                            teacherHours[classInfo.teacher] = {
                                totalHours: 0,
                                subjects: {}
                            };
                        }
                        teacherHours[classInfo.teacher].totalHours++;
                        
                        if (!teacherHours[classInfo.teacher].subjects[classInfo.subject]) {
                            teacherHours[classInfo.teacher].subjects[classInfo.subject] = 0;
                        }
                        teacherHours[classInfo.teacher].subjects[classInfo.subject]++;
                    }
                }
            }
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏π‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡πà‡∏≤‡∏ô
        Object.values(teacherData).forEach(teacher => {
            const hoursData = teacherHours[teacher.name] || { totalHours: 0, subjects: {} };
            const subjects = Object.entries(hoursData.subjects);
            
            const col = document.createElement('div');
            col.className = 'col-md-6 col-lg-4 mb-4';
            
            col.innerHTML = `
                <div class="card teacher-card summary-card h-100">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-chalkboard-teacher me-2"></i>${teacher.name}
                        </h5>
                        <span class="badge bg-primary">${hoursData.totalHours} ‡∏Ñ‡∏≤‡∏ö/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</span>
                    </div>
                    <div class="card-body">
                        <p class="card-text"><small class="text-muted">${teacher.position || '‡∏Ñ‡∏£‡∏π'}</small></p>
                        <h6 class="text-muted">‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô:</h6>
                        <ul class="list-group list-group-flush">
                            ${subjects.map(([subject, hours]) => 
                                `<li class="list-group-item d-flex justify-content-between align-items-center py-1">
                                    ${subject}
                                    <span class="badge bg-secondary rounded-pill">${hours} ‡∏Ñ‡∏≤‡∏ö</span>
                                </li>`
                            ).join('')}
                            ${subjects.length === 0 ? 
                                '<li class="list-group-item text-muted py-1">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô</li>' : ''}
                        </ul>
                    </div>
                    <div class="card-footer">
                        <small class="text-muted">‡∏™‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${hoursData.totalHours} ‡∏Ñ‡∏≤‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</small>
                    </div>
                </div>
            `;
            
            teacherSummaryContent.appendChild(col);
        });
        
        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏π
        if (Object.keys(teacherData).length === 0) {
            teacherSummaryContent.innerHTML = `
                <div class="col-12">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏π‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
                    </div>
                </div>
            `;
        }
    }

    static renderClassSummary() {
        const classSummaryContent = document.getElementById('class-summary-content');
        if (!classSummaryContent) return;
        
        classSummaryContent.innerHTML = '';
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
        const classSubjects = {};
        
        for (const className in scheduleData) {
            if (!classSubjects[className]) {
                classSubjects[className] = {};
            }
            
            for (const day in scheduleData[className]) {
                for (const period in scheduleData[className][day]) {
                    const classInfo = scheduleData[className][day][period];
                    if (classInfo.subject) {
                        if (!classSubjects[className][classInfo.subject]) {
                            classSubjects[className][classInfo.subject] = 0;
                        }
                        classSubjects[className][classInfo.subject]++;
                    }
                }
            }
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
        Object.values(classData).forEach(classItem => {
            const subjectsData = classSubjects[classItem.code] || {};
            const subjects = Object.entries(subjectsData);
            const totalHours = Object.values(subjectsData).reduce((sum, hours) => sum + hours, 0);
            
            const col = document.createElement('div');
            col.className = 'col-md-6 col-lg-4 mb-4';
            
            col.innerHTML = `
                <div class="card subject-card summary-card h-100">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-graduation-cap me-2"></i>${classItem.name}
                        </h5>
                        <p class="mb-0"><small class="text-muted">${classItem.program || ''}</small></p>
                    </div>
                    <div class="card-body">
                        <p class="card-text"><small class="text-muted">‡∏Ñ‡∏£‡∏π‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤: ${classItem.advisor || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î'}</small></p>
                        <h6 class="text-muted">‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:</h6>
                        <ul class="list-group list-group-flush">
                            ${subjects.map(([subject, hours]) => 
                                `<li class="list-group-item d-flex justify-content-between align-items-center py-1">
                                    ${subject}
                                    <span class="badge bg-secondary rounded-pill">${hours} ‡∏Ñ‡∏≤‡∏ö</span>
                                </li>`
                            ).join('')}
                            ${subjects.length === 0 ? 
                                '<li class="list-group-item text-muted py-1">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</li>' : ''}
                        </ul>
                    </div>
                    <div class="card-footer">
                        <small class="text-muted">‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${totalHours} ‡∏Ñ‡∏≤‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</small>
                    </div>
                </div>
            `;
            
            classSummaryContent.appendChild(col);
        });
        
        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
        if (Object.keys(classData).length === 0) {
            classSummaryContent.innerHTML = `
                <div class="col-12">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
                    </div>
                </div>
            `;
        }
    }

    static renderRoomSummary() {
        const roomSummaryContent = document.getElementById('room-summary-content');
        if (!roomSummaryContent) return;
        
        roomSummaryContent.innerHTML = '';
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á
        const roomUsage = {};
        
        for (const className in scheduleData) {
            for (const day in scheduleData[className]) {
                for (const period in scheduleData[className][day]) {
                    const classInfo = scheduleData[className][day][period];
                    if (classInfo.room) {
                        if (!roomUsage[classInfo.room]) {
                            roomUsage[classInfo.room] = {
                                totalHours: 0,
                                classes: {}
                            };
                        }
                        roomUsage[classInfo.room].totalHours++;
                        
                        if (!roomUsage[classInfo.room].classes[className]) {
                            roomUsage[classInfo.room].classes[className] = 0;
                        }
                        roomUsage[classInfo.room].classes[className]++;
                    }
                }
            }
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á
        Object.values(roomData).forEach(room => {
            const usageData = roomUsage[room.code] || { totalHours: 0, classes: {} };
            const classes = Object.entries(usageData.classes);
            
            const col = document.createElement('div');
            col.className = 'col-md-6 col-lg-4 mb-4';
            
            col.innerHTML = `
                <div class="card room-card summary-card h-100">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-door-open me-2"></i>${room.name}
                        </h5>
                        <span class="badge bg-primary">${usageData.totalHours} ‡∏Ñ‡∏≤‡∏ö/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</span>
                    </div>
                    <div class="card-body">
                        <p class="card-text"><small class="text-muted">${room.type} ‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏ ${room.capacity} ‡∏Ñ‡∏ô</small></p>
                        <h6 class="text-muted">‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:</h6>
                        <ul class="list-group list-group-flush">
                            ${classes.map(([classItem, hours]) => 
                                `<li class="list-group-item d-flex justify-content-between align-items-center py-1">
                                    ${classItem}
                                    <span class="badge bg-secondary rounded-pill">${hours} ‡∏Ñ‡∏≤‡∏ö</span>
                                </li>`
                            ).join('')}
                            ${classes.length === 0 ? 
                                '<li class="list-group-item text-muted py-1">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</li>' : ''}
                        </ul>
                    </div>
                    <div class="card-footer">
                        <small class="text-muted">‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ${Math.round((usageData.totalHours / 35) * 100)}% ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏ß‡∏°</small>
                    </div>
                </div>
            `;
            
            roomSummaryContent.appendChild(col);
        });
        
        // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á
        if (Object.keys(roomData).length === 0) {
            roomSummaryContent.innerHTML = `
                <div class="col-12">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
                    </div>
                </div>
            `;
        }
    }

    static renderSystemInfo() {
        const stats = DataManager.getStats();
        
        if (document.getElementById('teacherCount')) {
            document.getElementById('teacherCount').textContent = stats.teachers;
        }
        if (document.getElementById('subjectCount')) {
            document.getElementById('subjectCount').textContent = stats.subjects;
        }
        if (document.getElementById('roomCount')) {
            document.getElementById('roomCount').textContent = stats.rooms;
        }
        if (document.getElementById('classCount')) {
            document.getElementById('classCount').textContent = stats.classes;
        }
        
        // Update script URL field
        if (document.getElementById('scriptUrl')) {
            document.getElementById('scriptUrl').value = googleSheetsUrl || '';
        }
        
        // Update online mode status
        if (document.getElementById('onlineMode')) {
            document.getElementById('onlineMode').checked = onlineMode;
        }
        
        // Update connection status
        const connectionStatus = document.getElementById('connectionStatus');
        if (connectionStatus) {
            if (onlineMode && googleSheetsUrl) {
                connectionStatus.innerHTML = '<i class="fas fa-circle text-success me-1"></i>‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå';
            } else if (onlineMode) {
                connectionStatus.innerHTML = '<i class="fas fa-circle text-warning me-1"></i>‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ URL)';
            } else {
                connectionStatus.innerHTML = '<i class="fas fa-circle text-secondary me-1"></i>‡πÇ‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå';
            }
        }
        
        // Update connection details
        this.updateConnectionDetails();
    }
    
    static updateConnectionDetails() {
        const modeStatus = document.getElementById('modeStatus');
        const urlStatus = document.getElementById('urlStatus');
        const lastUpdate = document.getElementById('lastUpdate');
        
        if (modeStatus) {
            modeStatus.textContent = onlineMode ? '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå' : '‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå';
            modeStatus.className = onlineMode ? 'connection-good' : 'connection-warning';
        }
        
        if (urlStatus) {
            if (googleSheetsUrl) {
                urlStatus.textContent = googleSheetsUrl;
                urlStatus.className = 'url-valid';
            } else {
                urlStatus.textContent = '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤';
                urlStatus.className = 'url-warning';
            }
        }
        
        if (lastUpdate) {
            lastUpdate.textContent = new Date().toLocaleString('th-TH');
        }
    }
}

// Schedule editing functions
class ScheduleEditor {
    static editSchedule(className, day, period, classInfo = null) {
        // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°
        document.getElementById('scheduleClassName').value = className;
        document.getElementById('scheduleDay').value = day;
        document.getElementById('schedulePeriod').value = period;
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        document.getElementById('scheduleClassDisplay').textContent = className;
        document.getElementById('scheduleDayDisplay').textContent = day;
        document.getElementById('schedulePeriodDisplay').textContent = period;
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏π, ‡∏´‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤
        this.loadTeacherOptions();
        this.loadRoomOptions();
        this.loadSubjectOptions();
        
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (classInfo) {
            document.getElementById('scheduleSubject').value = classInfo.subject || '';
            document.getElementById('scheduleTeacher').value = classInfo.teacher || '';
            document.getElementById('scheduleRoom').value = classInfo.room || '';
            document.getElementById('deleteScheduleBtn').classList.remove('d-none');
        } else {
            document.getElementById('scheduleSubject').value = '';
            document.getElementById('scheduleTeacher').value = '';
            document.getElementById('scheduleRoom').value = '';
            document.getElementById('deleteScheduleBtn').classList.add('d-none');
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á modal
        const modal = new bootstrap.Modal(document.getElementById('scheduleFormModal'));
        modal.show();
    }
    
    static loadTeacherOptions() {
        const teacherSelect = document.getElementById('scheduleTeacher');
        if (!teacherSelect) return;
        
        teacherSelect.innerHTML = '<option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏π --</option>';
        
        Object.values(teacherData).forEach(teacher => {
            const option = document.createElement('option');
            option.value = teacher.name;
            option.textContent = teacher.name;
            teacherSelect.appendChild(option);
        });
    }
    
    static loadSubjectOptions() {
        const subjectSelect = document.getElementById('scheduleSubject');
        if (!subjectSelect) return;
        
        subjectSelect.innerHTML = '<option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤ --</option>';
        
        Object.values(subjectData).forEach(subject => {
            const option = document.createElement('option');
            option.value = subject.name;
            option.textContent = `${subject.code} - ${subject.name}`;
            subjectSelect.appendChild(option);
        });
    }
    
    static loadRoomOptions() {
        const roomSelect = document.getElementById('scheduleRoom');
        if (!roomSelect) return;
        
        roomSelect.innerHTML = '<option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á --</option>';
        
        Object.values(roomData).forEach(room => {
            const option = document.createElement('option');
            option.value = room.code;
            option.textContent = room.name;
            roomSelect.appendChild(option);
        });
    }
    
    static saveSchedule(formData) {
        const className = formData.className;
        const day = formData.day;
        const period = formData.period;
        const subject = formData.subject;
        const teacher = formData.teacher;
        const room = formData.room;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!subject && !teacher && !room) {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ
            if (scheduleData[className] && scheduleData[className][day] && scheduleData[className][day][period]) {
                delete scheduleData[className][day][period];
                
                // ‡∏•‡∏ö‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á
                if (Object.keys(scheduleData[className][day]).length === 0) {
                    delete scheduleData[className][day];
                }
                if (Object.keys(scheduleData[className]).length === 0) {
                    delete scheduleData[className];
                }
            }
        } else {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            if (!scheduleData[className]) {
                scheduleData[className] = {};
            }
            if (!scheduleData[className][day]) {
                scheduleData[className][day] = {};
            }
            
            scheduleData[className][day][period] = {
                subject: subject,
                teacher: teacher,
                room: room
            };
        }
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        DataManager.saveToLocalStorage();
        DataManager.autoSave();
        return true;
    }
    
    static deleteSchedule(className, day, period) {
        if (scheduleData[className] && scheduleData[className][day] && scheduleData[className][day][period]) {
            delete scheduleData[className][day][period];
            
            // ‡∏•‡∏ö‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á
            if (Object.keys(scheduleData[className][day]).length === 0) {
                delete scheduleData[className][day];
            }
            if (Object.keys(scheduleData[className]).length === 0) {
                delete scheduleData[className];
            }
            
            DataManager.saveToLocalStorage();
            DataManager.autoSave();
            return true;
        }
        return false;
    }
}

// Print functionality
class PrintManager {
    static printSchedule() {
        const currentView = document.querySelector('.view-content:not(.d-none)');
        
        if (currentView) {
            const printWindow = window.open('', '_blank');
            let title = currentView.querySelector('h3')?.textContent || '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô';
            let classInfo = '';
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (currentView.id === 'class-schedule') {
                const classSelect = document.getElementById('classSelect');
                const selectedClass = classSelect ? classSelect.value : Object.keys(classData)[0];
                const classDataItem = classData[selectedClass];
                
                if (classDataItem) {
                    classInfo = `<h4>${classDataItem.name}</h4>`;
                    title = `‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô - ${classDataItem.name}`;
                }
            } else if (currentView.id === 'teacher-schedule') {
                const teacherSelect = document.getElementById('teacherSelect');
                const selectedTeacher = teacherSelect ? teacherSelect.value : Object.values(teacherData)[0]?.name;
                
                if (selectedTeacher) {
                    classInfo = `<h4>‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô: ${selectedTeacher}</h4>`;
                    title = `‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô‡∏Ñ‡∏£‡∏π - ${selectedTeacher}`;
                }
            } else if (currentView.id === 'room-schedule') {
                const roomSelect = document.getElementById('roomSelect');
                const selectedRoom = roomSelect ? roomSelect.value : Object.values(roomData)[0]?.code;
                const roomDataItem = roomData[selectedRoom];
                
                if (roomDataItem) {
                    classInfo = `<h4>‡∏´‡πâ‡∏≠‡∏á: ${roomDataItem.name}</h4>`;
                    title = `‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á - ${roomDataItem.name}`;
                }
            }
            
            printWindow.document.write(`
                <html>
                    <head>
                        <title>‡∏û‡∏¥‡∏°‡∏û‡πå${title}</title>
                        <meta charset="UTF-8">
                        <style>
                            body { 
                                font-family: 'Sarabun', sans-serif; 
                                margin: 20px;
                                color: #333;
                            }
                            .header {
                                text-align: center;
                                margin-bottom: 20px;
                                border-bottom: 2px solid #333;
                                padding-bottom: 15px;
                            }
                            .school-name {
                                font-size: 24px;
                                font-weight: bold;
                                margin-bottom: 5px;
                            }
                            .schedule-title {
                                font-size: 20px;
                                margin-bottom: 10px;
                                color: #2c3e50;
                            }
                            .class-info {
                                font-size: 18px;
                                margin-bottom: 10px;
                                color: #3498db;
                            }
                            .print-date {
                                font-size: 14px;
                                color: #666;
                            }
                            table { 
                                width: 100%; 
                                border-collapse: collapse; 
                                margin: 20px 0;
                            }
                            th, td { 
                                border: 1px solid #000; 
                                padding: 8px; 
                                text-align: center; 
                                font-size: 12px;
                            }
                            th { 
                                background-color: #f0f0f0; 
                                font-weight: bold;
                            }
                            .break-cell { 
                                background-color: #ffe6e6; 
                                font-weight: bold;
                            }
                            .day-header {
                                background-color: #2c3e50;
                                color: white;
                                font-weight: bold;
                            }
                            .time-header {
                                background-color: #3498db;
                                color: white;
                                font-weight: bold;
                            }
                            .footer {
                                text-align: center;
                                margin-top: 30px;
                                font-size: 12px;
                                color: #666;
                            }
                            @media print {
                                body { margin: 0; }
                                .no-print { display: none; }
                            }
                        </style>
                    </head>
                    <body>
                        <div class="header">
                            <div class="school-name">‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏´‡∏•‡∏°‡∏ó‡∏≠‡∏á</div>
                            <div class="schedule-title">${title}</div>
                            ${classInfo}
                            <div class="print-date">‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date().toLocaleDateString('th-TH')}</div>
                        </div>
                        ${currentView.querySelector('.table-responsive')?.innerHTML || currentView.innerHTML}
                        <div class="footer">
                            <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå</p>
                        </div>
                    </body>
                </html>
            `);
            printWindow.document.close();
            
            // Wait for content to load before printing
            setTimeout(() => {
                printWindow.print();
                // printWindow.close(); // Uncomment to auto-close after printing
            }, 500);
        }
    }
}

// Utility functions
function showNotification(message, type = 'info') {
    // Remove existing notifications
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());
    
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `alert alert-${type === 'error' ? 'danger' : type} notification`;
    notification.innerHTML = `
        <div class="d-flex justify-content-between align-items-center">
            <span>${message}</span>
            <button type="button" class="btn-close" onclick="this.parentElement.parentElement.remove()"></button>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        if (notification.parentNode) {
            notification.remove();
        }
    }, 5000);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
function showProgress(message, current, total) {
    const progressElement = document.getElementById('uploadProgress');
    if (!progressElement) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á element ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        const progressDiv = document.createElement('div');
        progressDiv.id = 'uploadProgress';
        progressDiv.className = 'alert alert-info mt-3';
        progressDiv.style.position = 'fixed';
        progressDiv.style.top = '100px';
        progressDiv.style.right = '20px';
        progressDiv.style.zIndex = '9999';
        progressDiv.style.minWidth = '300px';
        progressDiv.innerHTML = `
            <div class="d-flex justify-content-between align-items-center">
                <span>${message}</span>
                <span>${current}/${total}</span>
            </div>
            <div class="progress mt-2">
                <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" 
                     style="width: ${(current/total)*100}%"></div>
            </div>
        `;
        document.body.appendChild(progressDiv);
    } else {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        progressElement.querySelector('span:first-child').textContent = message;
        progressElement.querySelector('span:last-child').textContent = `${current}/${total}`;
        progressElement.querySelector('.progress-bar').style.width = `${(current/total)*100}%`;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡πà‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
function hideProgress() {
    const progressElement = document.getElementById('uploadProgress');
    if (progressElement) {
        progressElement.remove();
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ó‡∏õ‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
function updateViewVisibility() {
    const systemInfoNavItem = document.querySelector('.nav-link[data-view="system-info"]').parentElement;
    
    if (isAdmin) {
        systemInfoNavItem.style.display = 'block';
    } else {
        systemInfoNavItem.style.display = 'none';
        
        // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡πÅ‡∏ó‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏õ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
        const currentView = document.querySelector('.view-content:not(.d-none)');
        if (currentView && currentView.id === 'system-info') {
            showView('class-schedule');
        }
    }
}

function showView(viewId) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
    if (viewId === 'system-info' && !isAdmin) {
        showNotification('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ', 'error');
        return;
    }
    
    // Hide all views
    document.querySelectorAll('.view-content').forEach(view => {
        view.classList.add('d-none');
    });
    
    // Show selected view
    const targetView = document.getElementById(viewId);
    if (targetView) {
        targetView.classList.remove('d-none');
    }
    
    // Update active nav link
    document.querySelectorAll('.sidebar .nav-link').forEach(item => {
        item.classList.remove('active');
    });
    
    const navLink = document.querySelector(`.sidebar .nav-link[data-view="${viewId}"]`);
    if (navLink) {
        navLink.classList.add('active');
    }
    
    // Render specific content
    switch (viewId) {
        case 'class-schedule':
            ScheduleRenderer.renderClassSchedule();
            break;
        case 'teacher-schedule':
            ScheduleRenderer.renderTeacherSchedule();
            break;
        case 'room-schedule':
            ScheduleRenderer.renderRoomSchedule();
            break;
        case 'teacher-summary':
            ScheduleRenderer.renderTeacherSummary();
            break;
        case 'class-summary':
            ScheduleRenderer.renderClassSummary();
            break;
        case 'room-summary':
            ScheduleRenderer.renderRoomSummary();
            break;
        case 'system-info':
            ScheduleRenderer.renderSystemInfo();
            break;
    }
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô view
    updateEditMode();
}

function updateEditMode() {
    const scheduleBody = document.getElementById('schedule-body');
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏°‡∏ô‡∏π‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö
    const adminMenu = document.getElementById('adminMenu');
    const loginBtn = document.getElementById('loginBtn');
    
    if (isAdmin) {
        if (adminMenu) adminMenu.classList.remove('d-none');
        if (loginBtn) loginBtn.innerHTML = '<i class="fas fa-sign-out-alt me-1"></i> ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö';
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        if (!document.getElementById('editModeAlert')) {
            const alert = document.createElement('div');
            alert.id = 'editModeAlert';
            alert.className = 'alert alert-warning alert-dismissible fade show mb-3';
            alert.innerHTML = `
                <i class="fas fa-edit me-2"></i>
                <strong>‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!</strong> ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            const mainContent = document.querySelector('.col-md-10');
            if (mainContent) {
                mainContent.insertBefore(alert, mainContent.firstChild);
            }
        }
    } else {
        if (adminMenu) adminMenu.classList.add('d-none');
        if (loginBtn) loginBtn.innerHTML = '<i class="fas fa-sign-in-alt me-1"></i> ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö';
        
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        const editModeAlert = document.getElementById('editModeAlert');
        if (editModeAlert) {
            editModeAlert.remove();
        }
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 223/226)
function parseRoomDisplay(roomCode) {
    if (!roomCode) return '';
    
    if (roomCode.includes('/')) {
        return `<span class="multiple-rooms">${roomCode}</span>`;
    } else if (roomCode.includes('Shop.')) {
        return `<span class="workshop-room">${roomCode}</span>`;
    } else if (['422', '428', '112', '111', '114', '113', '133', '424'].includes(roomCode)) {
        return `<span class="class-room">${roomCode}</span>`;
    } else {
        return `<span class="lab-room">${roomCode}</span>`;
    }
}

function loadSampleData() {
    // Only load sample data if no data exists
    if (Object.keys(scheduleData).length === 0) {
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Excel
        scheduleData = {
            "‡∏õ‡∏ß‡∏ä.2 ‡∏ä‡∏≠.": {
                "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå": {
                    1: { subject: "‡∏á‡∏≤‡∏ô‡∏ô‡∏¥‡∏ß‡πÄ‡∏°‡∏ï‡∏¥‡∏Å‡∏™‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏Æ‡∏î‡∏£‡∏≠‡∏•‡∏¥‡∏Å‡∏™‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô", teacher: "‡∏≠.‡∏≠‡∏≥‡∏û‡∏£‡∏£‡∏ì ‡∏ó‡∏¥‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á", room: "225" },
                    2: { subject: "‡∏á‡∏≤‡∏ô‡∏ô‡∏¥‡∏ß‡πÄ‡∏°‡∏ï‡∏¥‡∏Å‡∏™‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏Æ‡∏î‡∏£‡∏≠‡∏•‡∏¥‡∏Å‡∏™‡πå‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô", teacher: "‡∏≠.‡∏≠‡∏≥‡∏û‡∏£‡∏£‡∏ì ‡∏ó‡∏¥‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á", room: "225" },
                    5: { subject: "‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ó‡∏£‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå", teacher: "‡∏≠.‡∏ò‡∏µ‡∏£‡∏∞ ‡∏Å‡∏•‡∏°‡πÄ‡∏Å‡∏•‡∏≤", room: "124" }
                },
                "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£": {
                    1: { subject: "‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå", teacher: "‡∏≠.‡∏≠‡∏∏‡∏©‡∏≤ ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏™‡∏∏‡∏Ñ‡∏ô‡∏ò‡πå", room: "112" },
                    2: { subject: "‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡∏ä‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå", teacher: "‡∏≠.‡∏ô‡∏∏‡∏ä‡∏™‡∏£‡∏≤ ‡∏£‡πà‡∏°‡πÇ‡∏û‡∏ò‡∏¥‡πå‡∏ï‡∏≤‡∏•", room: "111" },
                    5: { subject: "‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ä‡πà‡∏≤‡∏á‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå", teacher: "‡∏≠.‡∏™‡∏∏‡∏Å‡∏£‡∏≤ ‡∏£‡∏∑‡πà‡∏ô‡πÄ‡∏£‡∏¥‡∏á", room: "427" }
                },
                "‡∏û‡∏∏‡∏ò": {
                    1: { subject: "‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô", teacher: "‡∏≠.‡∏û‡∏±‡∏ä‡∏£‡∏µ‡∏¢‡πå ‡πÄ‡∏¢‡πá‡∏ô‡∏ô‡∏†‡∏≤", room: "114" },
                    2: { subject: "‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô", teacher: "‡∏≠.‡∏û‡∏±‡∏ä‡∏£‡∏µ‡∏¢‡πå ‡πÄ‡∏¢‡πá‡∏ô‡∏ô‡∏†‡∏≤", room: "114" },
                    4: { subject: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ó‡∏¢‡∏∏", teacher: "‡∏≠.‡∏™‡∏∏‡∏Å‡∏£‡∏≤ ‡∏£‡∏∑‡πà‡∏ô‡πÄ‡∏£‡∏¥‡∏á", room: "427" },
                    5: { subject: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ó‡∏¢‡∏∏", teacher: "‡∏≠.‡∏™‡∏∏‡∏Å‡∏£‡∏≤ ‡∏£‡∏∑‡πà‡∏ô‡πÄ‡∏£‡∏¥‡∏á", room: "427" }
                },
                "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ": {
                    1: { subject: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå", teacher: "‡∏≠.‡∏ò‡∏µ‡∏£‡∏∞ ‡∏Å‡∏•‡∏°‡πÄ‡∏Å‡∏•‡∏≤", room: "124" },
                    2: { subject: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå", teacher: "‡∏≠.‡∏ò‡∏µ‡∏£‡∏∞ ‡∏Å‡∏•‡∏°‡πÄ‡∏Å‡∏•‡∏≤", room: "124" },
                    5: { subject: "‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå", teacher: "‡∏≠.‡∏ò‡∏µ‡∏£‡∏∞ ‡∏Å‡∏•‡∏°‡πÄ‡∏Å‡∏•‡∏≤", room: "124" },
                    6: { subject: "‡πÑ‡∏°‡πÇ‡∏Ñ‡∏£‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ó‡∏£‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå", teacher: "‡∏≠.‡∏ò‡∏µ‡∏£‡∏∞ ‡∏Å‡∏•‡∏°‡πÄ‡∏Å‡∏•‡∏≤", room: "124" }
                },
                "‡∏®‡∏∏‡∏Å‡∏£‡πå": {
                    1: { subject: "‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô", teacher: "‡∏≠.‡∏ò‡∏µ‡∏£‡∏∞ ‡∏Å‡∏•‡∏°‡πÄ‡∏Å‡∏•‡∏≤", room: "124" },
                    2: { subject: "‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô", teacher: "‡∏≠.‡∏ò‡∏µ‡∏£‡∏∞ ‡∏Å‡∏•‡∏°‡πÄ‡∏Å‡∏•‡∏≤", room: "124" },
                    5: { subject: "‡πÇ‡∏Æ‡∏°‡∏£‡∏π‡∏°", teacher: "‡∏≠.‡∏™‡∏∏‡∏Å‡∏£‡∏≤ ‡∏£‡∏∑‡πà‡∏ô‡πÄ‡∏£‡∏¥‡∏á", room: "428" },
                    6: { subject: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û 1", teacher: "", room: "" }
                }
            },
            "‡∏õ‡∏ß‡∏ä.1 ‡∏ä‡∏ü.": {
                "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå": {
                    1: { subject: "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤", teacher: "‡∏≠.‡∏ä‡∏•‡∏ò‡∏¥‡∏ä‡∏≤ ‡∏´‡∏°‡∏≠‡∏¢‡∏≤‡∏î‡∏µ", room: "223/226" },
                    2: { subject: "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤", teacher: "‡∏≠.‡∏ä‡∏•‡∏ò‡∏¥‡∏ä‡∏≤ ‡∏´‡∏°‡∏≠‡∏¢‡∏≤‡∏î‡∏µ", room: "223/226" },
                    5: { subject: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏î‡πÑ‡∏ü‡∏ü‡πâ‡∏≤", teacher: "‡∏≠.‡∏™‡∏∏‡∏Å‡∏£‡∏≤ ‡∏£‡∏∑‡πà‡∏ô‡πÄ‡∏£‡∏¥‡∏á", room: "223" }
                },
                "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£": {
                    1: { subject: "‡∏á‡∏≤‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡πÇ‡∏•‡∏´‡∏∞‡πÅ‡∏ú‡πà‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô", teacher: "‡∏≠.‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå ‡∏ä‡∏≤‡∏ç‡∏™‡∏π‡∏á‡πÄ‡∏ô‡∏¥‡∏ô", room: "Shop. ‡∏ä‡πà‡∏≤‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°" },
                    2: { subject: "‡∏á‡∏≤‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡πÇ‡∏•‡∏´‡∏∞‡πÅ‡∏ú‡πà‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô", teacher: "‡∏≠.‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå ‡∏ä‡∏≤‡∏ç‡∏™‡∏π‡∏á‡πÄ‡∏ô‡∏¥‡∏ô", room: "Shop. ‡∏ä‡πà‡∏≤‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°" },
                    5: { subject: "‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÉ‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£", teacher: "‡∏≠.‡∏≠‡∏≥‡∏û‡∏£‡∏£‡∏ì ‡∏ó‡∏¥‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á", room: "111" }
                },
                "‡∏û‡∏∏‡∏ò": {
                    1: { subject: "‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û", teacher: "‡∏≠.‡∏≠‡∏∏‡∏©‡∏≤ ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏™‡∏∏‡∏Ñ‡∏ô‡∏ò‡πå", room: "112" },
                    2: { subject: "‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©", teacher: "‡∏≠.‡∏ô‡∏∏‡∏ä‡∏™‡∏£‡∏≤ ‡∏£‡πà‡∏°‡πÇ‡∏û‡∏ò‡∏¥‡πå‡∏ï‡∏≤‡∏•", room: "111" },
                    5: { subject: "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°", teacher: "‡∏≠.‡∏û‡∏±‡∏ä‡∏£‡∏µ‡∏¢‡πå ‡πÄ‡∏¢‡πá‡∏ô‡∏ô‡∏†‡∏≤", room: "114" }
                },
                "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ": {
                    1: { subject: "‡∏á‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Å‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô", teacher: "‡∏≠.‡∏ì‡∏ò‡∏µ‡∏û‡∏±‡∏í‡∏ô‡πå ‡∏ò‡∏ô‡∏≤‡∏ò‡∏¥‡∏õ‡∏†‡∏¥‡∏ç‡πÇ‡∏ç‡∏Å‡∏∏‡∏•", room: "Shop. ‡∏ä‡πà‡∏≤‡∏á‡∏Å‡∏•" },
                    2: { subject: "‡∏á‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏Å‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô", teacher: "‡∏≠.‡∏ì‡∏ò‡∏µ‡∏û‡∏±‡∏í‡∏ô‡πå ‡∏ò‡∏ô‡∏≤‡∏ò‡∏¥‡∏õ‡∏†‡∏¥‡∏ç‡πÇ‡∏ç‡∏Å‡∏∏‡∏•", room: "Shop. ‡∏ä‡πà‡∏≤‡∏á‡∏Å‡∏•" },
                    5: { subject: "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°", teacher: "‡∏≠.‡∏õ‡∏£‡∏∞‡∏ß‡∏∏‡∏í‡∏¥ ‡πÉ‡∏à‡πÅ‡∏™‡∏ô", room: "113" }
                },
                "‡∏®‡∏∏‡∏Å‡∏£‡πå": {
                    1: { subject: "‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÉ‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£", teacher: "‡∏≠.‡∏≠‡∏≥‡∏û‡∏£‡∏£‡∏ì ‡∏ó‡∏¥‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á", room: "222/227" },
                    2: { subject: "‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÉ‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£", teacher: "‡∏≠.‡∏≠‡∏≥‡∏û‡∏£‡∏£‡∏ì ‡∏ó‡∏¥‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á", room: "222/227" },
                    5: { subject: "‡πÇ‡∏Æ‡∏°‡∏£‡∏π‡∏°", teacher: "‡∏≠.‡∏≠‡∏≥‡∏û‡∏£‡∏£‡∏ì ‡∏ó‡∏¥‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á", room: "223" },
                    6: { subject: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡∏π‡∏Å‡πÄ‡∏™‡∏∑‡∏≠‡∏ß‡∏¥‡∏™‡∏≤‡∏°‡∏±‡∏ç 2", teacher: "", room: "" }
                }
            }
        };
    }
    
    if (Object.keys(teacherData).length === 0) {
        teacherData = {
            "T001": { code: "T001", name: "‡∏≠.‡∏ò‡∏µ‡∏£‡∏∞ ‡∏Å‡∏•‡∏°‡πÄ‡∏Å‡∏•‡∏≤", position: "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤‡∏ä‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå" },
            "T002": { code: "T002", name: "‡∏≠.‡∏ä‡∏•‡∏ò‡∏¥‡∏ä‡∏≤ ‡∏´‡∏°‡∏≠‡∏¢‡∏≤‡∏î‡∏µ", position: "‡∏Ñ‡∏£‡∏π" },
            "T003": { code: "T003", name: "‡∏≠.‡∏≠‡∏≥‡∏û‡∏£‡∏£‡∏ì ‡∏ó‡∏¥‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á", position: "‡∏Ñ‡∏£‡∏π" },
            "T004": { code: "T004", name: "‡∏≠.‡∏™‡∏∏‡∏Å‡∏£‡∏≤ ‡∏£‡∏∑‡πà‡∏ô‡πÄ‡∏£‡∏¥‡∏á", position: "‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ù‡πà‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£" },
            "T005": { code: "T005", name: "‡∏≠.‡∏≠‡∏∏‡∏©‡∏≤ ‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏™‡∏∏‡∏Ñ‡∏ô‡∏ò‡πå", position: "‡∏Ñ‡∏£‡∏π" },
            "T006": { code: "T006", name: "‡∏≠.‡∏ô‡∏∏‡∏ä‡∏™‡∏£‡∏≤ ‡∏£‡πà‡∏°‡πÇ‡∏û‡∏ò‡∏¥‡πå‡∏ï‡∏≤‡∏•", position: "‡∏Ñ‡∏£‡∏π" },
            "T007": { code: "T007", name: "‡∏≠.‡∏û‡∏±‡∏ä‡∏£‡∏µ‡∏¢‡πå ‡πÄ‡∏¢‡πá‡∏ô‡∏ô‡∏†‡∏≤", position: "‡∏Ñ‡∏£‡∏π" },
            "T008": { code: "T008", name: "‡∏≠.‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå ‡∏ä‡∏≤‡∏ç‡∏™‡∏π‡∏á‡πÄ‡∏ô‡∏¥‡∏ô", position: "‡∏Ñ‡∏£‡∏π" },
            "T009": { code: "T009", name: "‡∏≠.‡∏ì‡∏ò‡∏µ‡∏û‡∏±‡∏í‡∏ô‡πå ‡∏ò‡∏ô‡∏≤‡∏ò‡∏¥‡∏õ‡∏†‡∏¥‡∏ç‡πÇ‡∏ç‡∏Å‡∏∏‡∏•", position: "‡∏Ñ‡∏£‡∏π" },
            "T010": { code: "T010", name: "‡∏≠.‡∏õ‡∏£‡∏∞‡∏ß‡∏∏‡∏í‡∏¥ ‡πÉ‡∏à‡πÅ‡∏™‡∏ô", position: "‡∏Ñ‡∏£‡∏π" },
            "T011": { code: "T011", name: "‡∏≠.‡∏û‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå ‡∏ô‡∏¥‡πà‡∏°‡∏ó‡∏≠‡∏á", position: "‡∏Ñ‡∏£‡∏π" },
            "T012": { code: "T012", name: "‡∏≠.‡∏õ‡∏£‡∏∞‡∏†‡∏≤‡∏™ ‡∏û‡∏π‡∏ô‡πÄ‡∏û‡∏ä‡∏£", position: "‡∏Ñ‡∏£‡∏π" }
        };
    }
    
    if (Object.keys(roomData).length === 0) {
        roomData = {
            "422": { code: "422", name: "‡∏´‡πâ‡∏≠‡∏á 422", type: "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", capacity: 40 },
            "427": { code: "427", name: "‡∏´‡πâ‡∏≠‡∏á 427", type: "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£", capacity: 30 },
            "428": { code: "428", name: "‡∏´‡πâ‡∏≠‡∏á 428", type: "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", capacity: 40 },
            "222": { code: "222", name: "‡∏´‡πâ‡∏≠‡∏á 222", type: "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£", capacity: 25 },
            "223": { code: "223", name: "‡∏´‡πâ‡∏≠‡∏á 223", type: "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£", capacity: 25 },
            "224": { code: "224", name: "‡∏´‡πâ‡∏≠‡∏á 224", type: "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", capacity: 40 },
            "225": { code: "225", name: "‡∏´‡πâ‡∏≠‡∏á 225", type: "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£", capacity: 25 },
            "226": { code: "226", name: "‡∏´‡πâ‡∏≠‡∏á 226", type: "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£", capacity: 25 },
            "227": { code: "227", name: "‡∏´‡πâ‡∏≠‡∏á 227", type: "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£", capacity: 25 },
            "124": { code: "124", name: "‡∏´‡πâ‡∏≠‡∏á 124", type: "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£", capacity: 25 },
            "121": { code: "121", name: "‡∏´‡πâ‡∏≠‡∏á 121", type: "‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£", capacity: 25 },
            "112": { code: "112", name: "‡∏´‡πâ‡∏≠‡∏á 112", type: "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", capacity: 40 },
            "111": { code: "111", name: "‡∏´‡πâ‡∏≠‡∏á 111", type: "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", capacity: 40 },
            "114": { code: "114", name: "‡∏´‡πâ‡∏≠‡∏á 114", type: "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", capacity: 40 },
            "113": { code: "113", name: "‡∏´‡πâ‡∏≠‡∏á 113", type: "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", capacity: 40 },
            "133": { code: "133", name: "‡∏´‡πâ‡∏≠‡∏á 133", type: "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", capacity: 40 },
            "424": { code: "424", name: "‡∏´‡πâ‡∏≠‡∏á 424", type: "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", capacity: 40 }
        };
    }
    
    if (Object.keys(classData).length === 0) {
        classData = {
            "‡∏õ‡∏ß‡∏ä.2 ‡∏ä‡∏≠.": { 
                code: "‡∏õ‡∏ß‡∏ä.2 ‡∏ä‡∏≠.", 
                name: "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û ‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà 2 ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ä‡πà‡∏≤‡∏á‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå",
                program: "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå",
                advisor: "‡∏≠.‡∏™‡∏∏‡∏Å‡∏£‡∏≤ ‡∏£‡∏∑‡πà‡∏ô‡πÄ‡∏£‡∏¥‡∏á"
            },
            "‡∏õ‡∏ß‡∏ä.1 ‡∏ä‡∏ü.": { 
                code: "‡∏õ‡∏ß‡∏ä.1 ‡∏ä‡∏ü.", 
                name: "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û ‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà 1 ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ä‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤",
                program: "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå",
                advisor: "‡∏≠.‡∏≠‡∏≥‡∏û‡∏£‡∏£‡∏ì ‡∏ó‡∏¥‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á"
            },
            "‡∏õ‡∏ß‡∏ä.2 ‡∏ä‡∏ü.": { 
                code: "‡∏õ‡∏ß‡∏ä.2 ‡∏ä‡∏ü.", 
                name: "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û ‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà 2 ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ä‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤",
                program: "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå",
                advisor: "‡∏≠.‡∏ä‡∏•‡∏ò‡∏¥‡∏ä‡∏≤ ‡∏´‡∏°‡∏≠‡∏¢‡∏≤‡∏î‡∏µ"
            },
            "‡∏õ‡∏ß‡∏ä.3 ‡∏ä‡∏ü.": { 
                code: "‡∏õ‡∏ß‡∏ä.3 ‡∏ä‡∏ü.", 
                name: "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û ‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ‡∏ó‡∏µ‡πà 3 ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ä‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤",
                program: "‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á",
                advisor: "‡∏≠.‡∏ò‡∏µ‡∏£‡∏∞ ‡∏Å‡∏•‡∏°‡πÄ‡∏Å‡∏•‡∏≤"
            },
            "‡∏õ‡∏ß‡∏™.1-1 ‡∏ä‡∏ü.": { 
                code: "‡∏õ‡∏ß‡∏™.1-1 ‡∏ä‡∏ü.", 
                name: "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û‡∏ä‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ‡∏õ‡∏µ‡∏ó‡∏µ‡πà 1 ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ä‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤",
                program: "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå",
                advisor: "‡∏≠.‡∏≠‡∏≥‡∏û‡∏£‡∏£‡∏ì ‡∏ó‡∏¥‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á"
            },
            "‡∏õ‡∏ß‡∏™.1-6 ‡∏ä‡∏ü.": { 
                code: "‡∏õ‡∏ß‡∏™.1-6 ‡∏ä‡∏ü.", 
                name: "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û‡∏ä‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ‡∏õ‡∏µ‡∏ó‡∏µ‡πà 1 ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ä‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤",
                program: "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå",
                advisor: "‡∏≠.‡∏≠‡∏≥‡∏û‡∏£‡∏£‡∏ì ‡∏ó‡∏¥‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á"
            },
            "‡∏õ‡∏ß‡∏™.2-1 ‡∏ä‡∏ü.": { 
                code: "‡∏õ‡∏ß‡∏™.2-1 ‡∏ä‡∏ü.", 
                name: "‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û‡∏ä‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ‡∏õ‡∏µ‡∏ó‡∏µ‡πà 2 ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ä‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤",
                program: "‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå",
                advisor: "‡∏≠.‡∏ò‡∏µ‡∏£‡∏∞ ‡∏Å‡∏•‡∏°‡πÄ‡∏Å‡∏•‡∏≤"
            }
        };
    }
    
    DataManager.saveToLocalStorage();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î Admin ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
function enableAdminMode() {
    isAdmin = true;
    localStorage.setItem('isAdmin', 'true');
    updateEditMode();
    updateViewVisibility();
    ScheduleRenderer.renderAllViews();
    showNotification('‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î Admin
function addAdminShortcut() {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏±‡∏î‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÇ‡∏•‡πÇ‡∏Å‡πâ
    const navbarBrand = document.querySelector('.navbar-brand');
    if (navbarBrand) {
        navbarBrand.addEventListener('dblclick', function() {
            if (!isAdmin) {
                enableAdminMode();
            }
        });
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô console
    console.log('üîß ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Developer:');
    console.log('enableAdminMode() - ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö');
    console.log('updateEditMode() - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
}

// Initialize the application
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    setupEventListeners();
    loadSampleData();
    ScheduleRenderer.renderAllViews();
    addAdminShortcut();
});

function initializeApp() {
    // Load data from localStorage
    DataManager.loadFromLocalStorage();
    
    // Set default view
    showView('class-schedule');
    
    // Check if user is logged in
    const savedLogin = localStorage.getItem('isAdmin');
    if (savedLogin === 'true') {
        isAdmin = true;
    }
    
    // Update edit mode ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ó‡∏õ
    updateEditMode();
    updateViewVisibility();
    
    // Render management tables
    TeacherManager.renderTeacherTable();
    SubjectManager.renderSubjectTable();
    RoomManager.renderRoomTable();
    ClassManager.renderClassTable();
    
    // Auto-load from Google Sheets if online mode is enabled
    if (onlineMode && googleSheetsUrl) {
        setTimeout(() => {
            DataManager.loadFromGoogleSheets().then(result => {
                if (result.success) {
                    showNotification('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
                    ScheduleRenderer.renderAllViews();
                    updateEditMode();
                    updateViewVisibility();
                }
            });
        }, 1000);
    }
}

function setupEventListeners() {
    // Navigation
    document.querySelectorAll('.sidebar .nav-link').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const view = this.getAttribute('data-view');
            showView(view);
        });
    });
    
    // Login
    document.getElementById('loginBtn').addEventListener('click', function(e) {
        e.preventDefault();
        if (isAdmin) {
            logout();
        } else {
            const loginModal = new bootstrap.Modal(document.getElementById('loginModal'));
            loginModal.show();
        }
    });
    
    // Login form
    document.getElementById('loginForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const username = document.getElementById('username').value;
        const password = document.getElementById('password').value;
        
        if (username === 'admin' && password === 'admin') {
            login();
        } else {
            showNotification('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'error');
        }
    });
    
    // Logout
    document.getElementById('logoutBtn').addEventListener('click', function(e) {
        e.preventDefault();
        logout();
    });
    
    // Class selection
    document.getElementById('classSelect').addEventListener('change', function() {
        ScheduleRenderer.renderClassSchedule();
    });
    
    // Teacher selection
    document.getElementById('teacherSelect').addEventListener('change', function() {
        ScheduleRenderer.renderTeacherSchedule();
    });
    
    // Room selection
    document.getElementById('roomSelect').addEventListener('change', function() {
        ScheduleRenderer.renderRoomSchedule();
    });
    
    // Print button
    document.getElementById('printBtn').addEventListener('click', function(e) {
        e.preventDefault();
        PrintManager.printSchedule();
    });
    
    // Online mode toggle
    document.getElementById('onlineMode').addEventListener('change', function() {
        onlineMode = this.checked;
        DataManager.saveToLocalStorage();
        showNotification(`‡πÇ‡∏´‡∏°‡∏î ${onlineMode ? '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå' : '‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå'}`, 'info');
        ScheduleRenderer.renderSystemInfo();
    });
    
    // Import/Export
    document.getElementById('exportData').addEventListener('click', function(e) {
        e.preventDefault();
        const modal = new bootstrap.Modal(document.getElementById('importExportModal'));
        document.getElementById('importExportTitle').textContent = '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
        modal.show();
    });
    
    document.getElementById('importData').addEventListener('click', function(e) {
        e.preventDefault();
        const modal = new bootstrap.Modal(document.getElementById('importExportModal'));
        document.getElementById('importExportTitle').textContent = '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
        modal.show();
    });
    
    // Google Sheets connection
    document.getElementById('connectGoogleSheets').addEventListener('click', function(e) {
        e.preventDefault();
        const modal = new bootstrap.Modal(document.getElementById('googleSheetsModal'));
        document.getElementById('scriptUrlModal').value = googleSheetsUrl;
        modal.show();
    });
    
    // Export buttons
    document.getElementById('exportTeachers').addEventListener('click', () => DataManager.exportData('teachers'));
    document.getElementById('exportSubjects').addEventListener('click', () => DataManager.exportData('subjects'));
    document.getElementById('exportRooms').addEventListener('click', () => DataManager.exportData('rooms'));
    document.getElementById('exportClasses').addEventListener('click', () => DataManager.exportData('classes'));
    document.getElementById('exportSchedule').addEventListener('click', () => DataManager.exportData('schedule'));
    document.getElementById('exportAll').addEventListener('click', () => DataManager.exportData('all'));
    
    // Import button
    document.getElementById('importDataBtn').addEventListener('click', function() {
        const fileInput = document.getElementById('importFile');
        const replaceData = document.getElementById('replaceData').checked;
        
        if (fileInput.files.length > 0) {
            DataManager.importData(fileInput.files[0], replaceData)
                .then(() => {
                    showNotification('‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
                    ScheduleRenderer.renderAllViews();
                    const modal = bootstrap.Modal.getInstance(document.getElementById('importExportModal'));
                    modal.hide();
                })
                .catch(error => {
                    showNotification(error.message, 'error');
                });
        } else {
            showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå', 'error');
        }
    });
    
    // Teacher Management
    document.getElementById('addTeacherBtn').addEventListener('click', () => {
        TeacherManager.addTeacher();
    });
    
    document.getElementById('teacherForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = {
            id: document.getElementById('teacherId').value,
            code: document.getElementById('teacherCode').value,
            name: document.getElementById('teacherName').value,
            position: document.getElementById('teacherPosition').value
        };
        
        if (TeacherManager.saveTeacher(formData)) {
            showNotification('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏π‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
            const modal = bootstrap.Modal.getInstance(document.getElementById('teacherFormModal'));
            modal.hide();
        }
    });
    
    // Subject Management
    document.getElementById('addSubjectBtn').addEventListener('click', () => {
        SubjectManager.addSubject();
    });
    
    document.getElementById('subjectForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = {
            id: document.getElementById('subjectId').value,
            code: document.getElementById('subjectCode').value,
            name: document.getElementById('subjectName').value,
            credit: document.getElementById('subjectCredit').value
        };
        
        if (SubjectManager.saveSubject(formData)) {
            showNotification('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
            const modal = bootstrap.Modal.getInstance(document.getElementById('subjectFormModal'));
            modal.hide();
        }
    });
    
    // Room Management
    document.getElementById('addRoomBtn').addEventListener('click', () => {
        RoomManager.addRoom();
    });
    
    document.getElementById('roomForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = {
            id: document.getElementById('roomId').value,
            code: document.getElementById('roomCode').value,
            name: document.getElementById('roomName').value,
            type: document.getElementById('roomType').value,
            capacity: document.getElementById('roomCapacity').value
        };
        
        if (RoomManager.saveRoom(formData)) {
            showNotification('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
            const modal = bootstrap.Modal.getInstance(document.getElementById('roomFormModal'));
            modal.hide();
        }
    });
    
    // Class Management
    document.getElementById('addClassBtn').addEventListener('click', () => {
        ClassManager.addClass();
    });
    
    document.getElementById('classForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = {
            id: document.getElementById('classId').value,
            code: document.getElementById('classCode').value,
            name: document.getElementById('className').value,
            program: document.getElementById('classProgram').value,
            advisor: document.getElementById('classAdvisor').value
        };
        
        if (ClassManager.saveClass(formData)) {
            showNotification('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
            const modal = bootstrap.Modal.getInstance(document.getElementById('classFormModal'));
            modal.hide();
        }
    });
    
    // Schedule form
    document.getElementById('scheduleForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = {
            className: document.getElementById('scheduleClassName').value,
            day: document.getElementById('scheduleDay').value,
            period: document.getElementById('schedulePeriod').value,
            subject: document.getElementById('scheduleSubject').value,
            teacher: document.getElementById('scheduleTeacher').value,
            room: document.getElementById('scheduleRoom').value
        };
        
        if (ScheduleEditor.saveSchedule(formData)) {
            showNotification('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
            ScheduleRenderer.renderAllViews();
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('scheduleFormModal'));
            modal.hide();
        } else {
            showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å', 'error');
        }
    });
    
    // Delete schedule button
    document.getElementById('deleteScheduleBtn').addEventListener('click', function() {
        const className = document.getElementById('scheduleClassName').value;
        const day = document.getElementById('scheduleDay').value;
        const period = document.getElementById('schedulePeriod').value;
        
        if (ScheduleEditor.deleteSchedule(className, day, period)) {
            showNotification('‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
            ScheduleRenderer.renderAllViews();
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('scheduleFormModal'));
            modal.hide();
        } else {
            showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö', 'error');
        }
    });
    
    // Google Sheets buttons
    document.getElementById('saveScriptUrl').addEventListener('click', saveScriptUrl);
    document.getElementById('testConnection').addEventListener('click', testConnectionDetailed);
    document.getElementById('initializeSheets').addEventListener('click', initializeSheets);
    document.getElementById('syncToSheets').addEventListener('click', syncToSheets);
    document.getElementById('syncToSheetsBatch').addEventListener('click', syncToSheetsBatch);
    
    document.getElementById('saveScriptUrlModal').addEventListener('click', saveScriptUrlModal);
    document.getElementById('testConnectionModal').addEventListener('click', testConnectionDetailed);
    document.getElementById('initializeSheetsModal').addEventListener('click', initializeSheetsModal);
    document.getElementById('syncToSheetsModal').addEventListener('click', syncToSheetsModal);
    document.getElementById('syncToSheetsBatchModal').addEventListener('click', syncToSheetsBatchModal);
    document.getElementById('loadFromSheetsModal').addEventListener('click', loadFromSheetsModal);
    
    // Troubleshooting buttons
    document.getElementById('clearCache').addEventListener('click', clearCache);
    document.getElementById('checkPermissions').addEventListener('click', checkPermissions);
    document.getElementById('reloadData').addEventListener('click', reloadData);
}

function login() {
    isAdmin = true;
    localStorage.setItem('isAdmin', 'true');
    updateEditMode();
    updateViewVisibility();
    ScheduleRenderer.renderAllViews();
    showNotification('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
}

function logout() {
    isAdmin = false;
    localStorage.removeItem('isAdmin');
    updateEditMode();
    updateViewVisibility();
    ScheduleRenderer.renderAllViews();
    showNotification('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
}

function validateAndFixUrl(url) {
    if (!url) return null;
    
    let fixedUrl = url.trim();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    try {
        new URL(fixedUrl);
    } catch (error) {
        showNotification('URL ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'error');
        return null;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Google Apps Script URL ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!fixedUrl.includes('script.google.com')) {
        showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ Google Apps Script URL', 'warning');
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ /dev ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢
    if (fixedUrl.includes('/dev')) {
        fixedUrl = fixedUrl.replace('/dev', '');
        showNotification('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å deployment /dev ‡πÄ‡∏õ‡πá‡∏ô production', 'info');
    }
    
    return fixedUrl;
}

function saveScriptUrl() {
    let url = document.getElementById('scriptUrl').value.trim();
    
    const fixedUrl = validateAndFixUrl(url);
    if (!fixedUrl) return;
    
    googleSheetsUrl = fixedUrl;
    DataManager.saveToLocalStorage();
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó URL ‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå
    document.getElementById('scriptUrl').value = fixedUrl;
    
    showNotification('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
    ScheduleRenderer.renderSystemInfo();
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    setTimeout(() => {
        testConnectionDetailed();
    }, 1000);
}

function saveScriptUrlModal() {
    let url = document.getElementById('scriptUrlModal').value.trim();
    
    const fixedUrl = validateAndFixUrl(url);
    if (!fixedUrl) return;
    
    googleSheetsUrl = fixedUrl;
    DataManager.saveToLocalStorage();
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó URL ‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå
    document.getElementById('scriptUrl').value = fixedUrl;
    document.getElementById('scriptUrlModal').value = fixedUrl;
    
    showNotification('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
    ScheduleRenderer.renderSystemInfo();
    
    const modal = bootstrap.Modal.getInstance(document.getElementById('googleSheetsModal'));
    modal.hide();
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    setTimeout(() => {
        testConnectionDetailed();
    }, 1000);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
async function testConnectionDetailed() {
    const testBtn = document.getElementById('testConnection');
    const originalText = testBtn.innerHTML;
    
    try {
        testBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...';
        testBtn.disabled = true;
        
        showNotification('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î...', 'info');
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        if (!googleSheetsUrl) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Google Apps Script URL ‡∏Å‡πà‡∏≠‡∏ô');
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ URL ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        const fixedUrl = DataManager.fixGoogleScriptUrl(googleSheetsUrl);
        console.log('URL ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:', fixedUrl);
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        const result = await GoogleSheetsManager.testConnection();
        
        if (result.success) {
            showNotification('‚úÖ ' + result.message, 'success');
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
            console.log('‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', result);
        } else {
            showNotification('‚ùå ' + result.message, 'error');
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
            showDetailedTroubleshooting(result);
        }
    } catch (error) {
        console.error('‚ùå Connection test failed:', error);
        showNotification('‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + error.message, 'error');
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        showDetailedTroubleshooting({ error: error.message });
    } finally {
        testBtn.innerHTML = originalText;
        testBtn.disabled = false;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
function showDetailedTroubleshooting(result) {
    const troubleshootingTips = `
        <div class="alert alert-warning mt-3 troubleshooting-tips">
            <h6><i class="fas fa-tools me-2"></i>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ "Failed to fetch":</h6>
            <ol class="mb-2">
                <li><strong>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Apps Script Deployment:</strong>
                    <ul>
                        <li>‡πÄ‡∏õ‡∏¥‡∏î Google Apps Script</li>
                        <li>‡πÑ‡∏õ‡∏ó‡∏µ‡πà Deploy > Manage deployments</li>
                        <li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏î "Deploy"</li>
                        <li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "Web App" ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</li>
                        <li>‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ "Execute as" ‡πÄ‡∏õ‡πá‡∏ô "Me"</li>
                        <li>‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ "Who has access" ‡πÄ‡∏õ‡πá‡∏ô "Anyone"</li>
                        <li>‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å URL ‡πÉ‡∏´‡∏°‡πà</li>
                    </ul>
                </li>
                <li><strong>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CORS Settings:</strong>
                    <ul>
                        <li>‡πÉ‡∏ô Google Apps Script ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° doGet ‡πÅ‡∏•‡∏∞ doPost functions</li>
                        <li>‡πÉ‡∏ä‡πâ ContentService.createTextOutput()</li>
                        <li>‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏ä‡πâ HtmlService ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API endpoints</li>
                    </ul>
                </li>
                <li><strong>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL:</strong>
                    <ul>
                        <li>URL ‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ https://script.google.com/macros/s/...</li>
                        <li>‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ /dev ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢ URL</li>
                        <li>‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î URL ‡πÉ‡∏ô browser ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö</li>
                    </ul>
                </li>
                <li><strong>‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î:</strong>
                    <ul>
                        <li>‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πàÁ©©ÂÆö</li>
                        <li>‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</li>
                        <li>Extension ‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á</li>
                    </ul>
                </li>
            </ol>
            <div class="mt-2">
                <button class="btn btn-sm btn-outline-primary me-2" onclick="openUrlInNewTab('${googleSheetsUrl}')">
                    <i class="fas fa-external-link-alt me-1"></i> ‡πÄ‡∏õ‡∏¥‡∏î URL ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
                </button>
                <button class="btn btn-sm btn-outline-info" onclick="testAlternativeMethods()">
                    <i class="fas fa-vial me-1"></i> ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô
                </button>
            </div>
        </div>
    `;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô system info view
    const systemInfo = document.getElementById('system-info');
    const existingTips = systemInfo.querySelector('.troubleshooting-tips');
    if (existingTips) {
        existingTips.remove();
    }
    
    const tipsElement = document.createElement('div');
    tipsElement.className = 'troubleshooting-tips';
    tipsElement.innerHTML = troubleshootingTips;
    systemInfo.querySelector('.card-body').appendChild(tipsElement);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô
async function testAlternativeMethods() {
    showNotification('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡πÜ...', 'info');
    
    try {
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö no-cors method
        const noCorsResult = await GoogleSheetsManager.testWithNoCors();
        showNotification('‚úÖ No-CORS method: ' + noCorsResult.message, 'success');
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö XMLHttpRequest
        const xhrResult = await GoogleSheetsManager.testWithXMLHttpRequest();
        showNotification('‚úÖ XMLHttpRequest: ' + xhrResult.message, 'success');
        
    } catch (error) {
        showNotification('‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + error.message, 'error');
    }
}

function openUrlInNewTab(url) {
    window.open(url, '_blank');
}

async function initializeSheets() {
    try {
        showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Google Sheets...', 'info');
        const result = await GoogleSheetsManager.initializeSheets();
        
        if (result.success) {
            showNotification('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + result.message, 'success');
            
            // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å initialize
            setTimeout(() => {
                GoogleSheetsManager.loadFromSheets();
            }, 2000);
        } else {
            showNotification('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + result.message, 'error');
        }
    } catch (error) {
        showNotification(error.message, 'error');
    }
}

async function initializeSheetsModal() {
    try {
        showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Google Sheets...', 'info');
        const result = await GoogleSheetsManager.initializeSheets();
        
        if (result.success) {
            showNotification('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + result.message, 'success');
            
            // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å initialize
            setTimeout(() => {
                GoogleSheetsManager.loadFromSheets();
            }, 2000);
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('googleSheetsModal'));
            modal.hide();
        } else {
            showNotification('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + result.message, 'error');
        }
    } catch (error) {
        showNotification(error.message, 'error');
    }
}

async function syncToSheets() {
    try {
        showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...', 'info');
        const result = await GoogleSheetsManager.syncToSheets();
        if (result.success) {
            showNotification('‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + result.message, 'success');
        } else {
            showNotification('‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + result.message, 'error');
        }
    } catch (error) {
        showNotification(error.message, 'error');
    }
}

async function syncToSheetsModal() {
    try {
        showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...', 'info');
        const result = await GoogleSheetsManager.syncToSheets();
        if (result.success) {
            showNotification('‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + result.message, 'success');
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('googleSheetsModal'));
            modal.hide();
        } else {
            showNotification('‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + result.message, 'error');
        }
    } catch (error) {
        showNotification(error.message, 'error');
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: sync ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î
async function syncToSheetsBatch() {
    try {
        showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î...', 'info');
        const result = await GoogleSheetsManager.syncToSheetsBatch();
        if (result.success) {
            showNotification('‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + result.message, 'success');
        } else {
            showNotification('‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + result.message, 'error');
        }
    } catch (error) {
        showNotification(error.message, 'error');
    }
}

async function syncToSheetsBatchModal() {
    try {
        showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î...', 'info');
        const result = await GoogleSheetsManager.syncToSheetsBatch();
        if (result.success) {
            showNotification('‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + result.message, 'success');
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('googleSheetsModal'));
            modal.hide();
        } else {
            showNotification('‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + result.message, 'error');
        }
    } catch (error) {
        showNotification(error.message, 'error');
    }
}

async function loadFromSheetsModal() {
    try {
        showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...', 'info');
        const result = await GoogleSheetsManager.loadFromSheets();
        if (result.success) {
            showNotification('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + result.message, 'success');
            ScheduleRenderer.renderAllViews();
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('googleSheetsModal'));
            modal.hide();
        } else {
            showNotification('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + result.message, 'error');
        }
    } catch (error) {
        showNotification(error.message, 'error');
    }
}

function clearCache() {
    localStorage.clear();
    showNotification('‡∏•‡πâ‡∏≤‡∏á Cache ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
    setTimeout(() => {
        location.reload();
    }, 1000);
}

async function checkPermissions() {
    try {
        if (!googleSheetsUrl) {
            throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Google Apps Script URL ‡∏Å‡πà‡∏≠‡∏ô');
        }
        
        const response = await fetch(DataManager.fixGoogleScriptUrl(googleSheetsUrl) + `?action=checkPermissions`);
        const result = await response.json();
        
        if (result.success) {
            showNotification('‚úÖ ' + result.message, 'success');
        } else {
            showNotification('‚ùå ' + result.message, 'error');
        }
    } catch (error) {
        showNotification('‚ùå ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + error.message, 'error');
    }
}

function reloadData() {
    showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà...', 'info');
    ScheduleRenderer.renderAllViews();
    showNotification('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
}

// Make functions globally available for HTML onclick events
window.saveScriptUrl = saveScriptUrl;
window.testConnectionDetailed = testConnectionDetailed;
window.initializeSheets = initializeSheets;
window.syncToSheets = syncToSheets;
window.syncToSheetsBatch = syncToSheetsBatch;
window.saveScriptUrlModal = saveScriptUrlModal;
window.testConnectionModal = testConnectionDetailed;
window.initializeSheetsModal = initializeSheetsModal;
window.syncToSheetsModal = syncToSheetsModal;
window.syncToSheetsBatchModal = syncToSheetsBatchModal;
window.loadFromSheetsModal = loadFromSheetsModal;
window.enableAdminMode = enableAdminMode;
window.openUrlInNewTab = openUrlInNewTab;
window.testAlternativeMethods = testAlternativeMethods;